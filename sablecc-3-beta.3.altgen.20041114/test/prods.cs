/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  org.sablecc.sablecc.analysis;

namespace org.sablecc.sablecc.node {

public abstract class PGrammar : Node
{
}

public abstract class PHelpers : Node
{
}

public abstract class PHelperDef : Node
{
}

public abstract class PStates : Node
{
}

public abstract class PTokens : Node
{
}

public abstract class PTokenDef : Node
{
}

public abstract class PStateList : Node
{
}

public abstract class PStateListTail : Node
{
}

public abstract class PTransition : Node
{
}

public abstract class PIgnTokens : Node
{
}

public abstract class PRegExp : Node
{
}

public abstract class PConcat : Node
{
}

public abstract class PUnExp : Node
{
}

public abstract class PBasic : Node
{
}

public abstract class PChar : Node
{
}

public abstract class PSet : Node
{
}

public abstract class PUnOp : Node
{
}

public abstract class PBinOp : Node
{
}

public abstract class PProductions : Node
{
}

public abstract class PProd : Node
{
}

public abstract class PAlt : Node
{
}

public abstract class PAltTransform : Node
{
}

public abstract class PTerm : Node
{
}

public abstract class PListTerm : Node
{
}

public abstract class PProdName : Node
{
}

public abstract class PElem : Node
{
}

public abstract class PSpecifier : Node
{
}

public abstract class PAst : Node
{
}

public abstract class PAstProd : Node
{
}

public abstract class PAstAlt : Node
{
}


public sealed class AGrammar : PGrammar
{
    private TypedList _package_;
    private PHelpers _helpers_;
    private PStates _states_;
    private PTokens _tokens_;
    private PIgnTokens _ign_tokens_;
    private PProductions _productions_;
    private PAst _ast_;

    public AGrammar ()
    {
        this._package_ = new TypedList(new Package_Cast(this));
    }

    public AGrammar (
            IList _package_,
            PHelpers _helpers_,
            PStates _states_,
            PTokens _tokens_,
            PIgnTokens _ign_tokens_,
            PProductions _productions_,
            PAst _ast_
    )
    {
        this._package_ = new TypedList(new Package_Cast(this));
        this._package_.Clear();
        this._package_.AddAll(_package_);
        SetHelpers (_helpers_);
        SetStates (_states_);
        SetTokens (_tokens_);
        SetIgnTokens (_ign_tokens_);
        SetProductions (_productions_);
        SetAst (_ast_);
    }

    public override Object Clone()
    {
        return new AGrammar (
            CloneList (_package_),
            (PHelpers)CloneNode (_helpers_),
            (PStates)CloneNode (_states_),
            (PTokens)CloneNode (_tokens_),
            (PIgnTokens)CloneNode (_ign_tokens_),
            (PProductions)CloneNode (_productions_),
            (PAst)CloneNode (_ast_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGrammar(this);
    }

    public IList GetPackage ()
    {
        return _package_;
    }

    public void setPackage (IList list)
    {
        _package_.Clear();
        _package_.AddAll(list);
    }
    public PHelpers GetHelpers ()
    {
        return _helpers_;
    }

    public void SetHelpers (PHelpers node)
    {
        if(_helpers_ != null)
        {
            _helpers_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _helpers_ = node;
    }
    public PStates GetStates ()
    {
        return _states_;
    }

    public void SetStates (PStates node)
    {
        if(_states_ != null)
        {
            _states_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _states_ = node;
    }
    public PTokens GetTokens ()
    {
        return _tokens_;
    }

    public void SetTokens (PTokens node)
    {
        if(_tokens_ != null)
        {
            _tokens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tokens_ = node;
    }
    public PIgnTokens GetIgnTokens ()
    {
        return _ign_tokens_;
    }

    public void SetIgnTokens (PIgnTokens node)
    {
        if(_ign_tokens_ != null)
        {
            _ign_tokens_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ign_tokens_ = node;
    }
    public PProductions GetProductions ()
    {
        return _productions_;
    }

    public void SetProductions (PProductions node)
    {
        if(_productions_ != null)
        {
            _productions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _productions_ = node;
    }
    public PAst GetAst ()
    {
        return _ast_;
    }

    public void SetAst (PAst node)
    {
        if(_ast_ != null)
        {
            _ast_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _ast_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_package_)
            + ToString (_helpers_)
            + ToString (_states_)
            + ToString (_tokens_)
            + ToString (_ign_tokens_)
            + ToString (_productions_)
            + ToString (_ast_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _package_.Contains(child) )
        {
            _package_.Remove(child);
            return;
        }
        if ( _helpers_ == child )
        {
            _helpers_ = null;
            return;
        }
        if ( _states_ == child )
        {
            _states_ = null;
            return;
        }
        if ( _tokens_ == child )
        {
            _tokens_ = null;
            return;
        }
        if ( _ign_tokens_ == child )
        {
            _ign_tokens_ = null;
            return;
        }
        if ( _productions_ == child )
        {
            _productions_ = null;
            return;
        }
        if ( _ast_ == child )
        {
            _ast_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _package_.Count; i++ )
        {
            Node n = (Node)_package_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _package_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _package_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _helpers_ == oldChild )
        {
            SetHelpers ((PHelpers) newChild);
            return;
        }
        if ( _states_ == oldChild )
        {
            SetStates ((PStates) newChild);
            return;
        }
        if ( _tokens_ == oldChild )
        {
            SetTokens ((PTokens) newChild);
            return;
        }
        if ( _ign_tokens_ == oldChild )
        {
            SetIgnTokens ((PIgnTokens) newChild);
            return;
        }
        if ( _productions_ == oldChild )
        {
            SetProductions ((PProductions) newChild);
            return;
        }
        if ( _ast_ == oldChild )
        {
            SetAst ((PAst) newChild);
            return;
        }
    }

    private class Package_Cast : Cast
    {
        AGrammar obj;

        internal Package_Cast (AGrammar obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TPkgId node = (TPkgId) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TPkgId node = (TPkgId) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AHelpers : PHelpers
{
    private TypedList _helper_defs_;

    public AHelpers ()
    {
        this._helper_defs_ = new TypedList(new HelperDefs_Cast(this));
    }

    public AHelpers (
            IList _helper_defs_
    )
    {
        this._helper_defs_ = new TypedList(new HelperDefs_Cast(this));
        this._helper_defs_.Clear();
        this._helper_defs_.AddAll(_helper_defs_);
    }

    public override Object Clone()
    {
        return new AHelpers (
            CloneList (_helper_defs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHelpers(this);
    }

    public IList GetHelperDefs ()
    {
        return _helper_defs_;
    }

    public void setHelperDefs (IList list)
    {
        _helper_defs_.Clear();
        _helper_defs_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_helper_defs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _helper_defs_.Contains(child) )
        {
            _helper_defs_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _helper_defs_.Count; i++ )
        {
            Node n = (Node)_helper_defs_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _helper_defs_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _helper_defs_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class HelperDefs_Cast : Cast
    {
        AHelpers obj;

        internal HelperDefs_Cast (AHelpers obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PHelperDef node = (PHelperDef) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PHelperDef node = (PHelperDef) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AHelperDef : PHelperDef
{
    private TId _id_;
    private PRegExp _reg_exp_;

    public AHelperDef ()
    {
    }

    public AHelperDef (
            TId _id_,
            PRegExp _reg_exp_
    )
    {
        SetId (_id_);
        SetRegExp (_reg_exp_);
    }

    public override Object Clone()
    {
        return new AHelperDef (
            (TId)CloneNode (_id_),
            (PRegExp)CloneNode (_reg_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHelperDef(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PRegExp GetRegExp ()
    {
        return _reg_exp_;
    }

    public void SetRegExp (PRegExp node)
    {
        if(_reg_exp_ != null)
        {
            _reg_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _reg_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_reg_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _reg_exp_ == child )
        {
            _reg_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _reg_exp_ == oldChild )
        {
            SetRegExp ((PRegExp) newChild);
            return;
        }
    }

}
public sealed class AStates : PStates
{
    private TypedList _list_id_;

    public AStates ()
    {
        this._list_id_ = new TypedList(new ListId_Cast(this));
    }

    public AStates (
            IList _list_id_
    )
    {
        this._list_id_ = new TypedList(new ListId_Cast(this));
        this._list_id_.Clear();
        this._list_id_.AddAll(_list_id_);
    }

    public override Object Clone()
    {
        return new AStates (
            CloneList (_list_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStates(this);
    }

    public IList GetListId ()
    {
        return _list_id_;
    }

    public void setListId (IList list)
    {
        _list_id_.Clear();
        _list_id_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_list_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _list_id_.Contains(child) )
        {
            _list_id_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _list_id_.Count; i++ )
        {
            Node n = (Node)_list_id_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _list_id_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _list_id_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class ListId_Cast : Cast
    {
        AStates obj;

        internal ListId_Cast (AStates obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TId node = (TId) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TId node = (TId) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATokens : PTokens
{
    private TypedList _token_defs_;

    public ATokens ()
    {
        this._token_defs_ = new TypedList(new TokenDefs_Cast(this));
    }

    public ATokens (
            IList _token_defs_
    )
    {
        this._token_defs_ = new TypedList(new TokenDefs_Cast(this));
        this._token_defs_.Clear();
        this._token_defs_.AddAll(_token_defs_);
    }

    public override Object Clone()
    {
        return new ATokens (
            CloneList (_token_defs_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokens(this);
    }

    public IList GetTokenDefs ()
    {
        return _token_defs_;
    }

    public void setTokenDefs (IList list)
    {
        _token_defs_.Clear();
        _token_defs_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_token_defs_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _token_defs_.Contains(child) )
        {
            _token_defs_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _token_defs_.Count; i++ )
        {
            Node n = (Node)_token_defs_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _token_defs_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _token_defs_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class TokenDefs_Cast : Cast
    {
        ATokens obj;

        internal TokenDefs_Cast (ATokens obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PTokenDef node = (PTokenDef) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PTokenDef node = (PTokenDef) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ATokenDef : PTokenDef
{
    private PStateList _state_list_;
    private TId _id_;
    private PRegExp _reg_exp_;
    private TSlash _slash_;
    private PRegExp _look_ahead_;

    public ATokenDef ()
    {
    }

    public ATokenDef (
            PStateList _state_list_,
            TId _id_,
            PRegExp _reg_exp_,
            TSlash _slash_,
            PRegExp _look_ahead_
    )
    {
        SetStateList (_state_list_);
        SetId (_id_);
        SetRegExp (_reg_exp_);
        SetSlash (_slash_);
        SetLookAhead (_look_ahead_);
    }

    public override Object Clone()
    {
        return new ATokenDef (
            (PStateList)CloneNode (_state_list_),
            (TId)CloneNode (_id_),
            (PRegExp)CloneNode (_reg_exp_),
            (TSlash)CloneNode (_slash_),
            (PRegExp)CloneNode (_look_ahead_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenDef(this);
    }

    public PStateList GetStateList ()
    {
        return _state_list_;
    }

    public void SetStateList (PStateList node)
    {
        if(_state_list_ != null)
        {
            _state_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _state_list_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PRegExp GetRegExp ()
    {
        return _reg_exp_;
    }

    public void SetRegExp (PRegExp node)
    {
        if(_reg_exp_ != null)
        {
            _reg_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _reg_exp_ = node;
    }
    public TSlash GetSlash ()
    {
        return _slash_;
    }

    public void SetSlash (TSlash node)
    {
        if(_slash_ != null)
        {
            _slash_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _slash_ = node;
    }
    public PRegExp GetLookAhead ()
    {
        return _look_ahead_;
    }

    public void SetLookAhead (PRegExp node)
    {
        if(_look_ahead_ != null)
        {
            _look_ahead_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _look_ahead_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_state_list_)
            + ToString (_id_)
            + ToString (_reg_exp_)
            + ToString (_slash_)
            + ToString (_look_ahead_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _state_list_ == child )
        {
            _state_list_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _reg_exp_ == child )
        {
            _reg_exp_ = null;
            return;
        }
        if ( _slash_ == child )
        {
            _slash_ = null;
            return;
        }
        if ( _look_ahead_ == child )
        {
            _look_ahead_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _state_list_ == oldChild )
        {
            SetStateList ((PStateList) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _reg_exp_ == oldChild )
        {
            SetRegExp ((PRegExp) newChild);
            return;
        }
        if ( _slash_ == oldChild )
        {
            SetSlash ((TSlash) newChild);
            return;
        }
        if ( _look_ahead_ == oldChild )
        {
            SetLookAhead ((PRegExp) newChild);
            return;
        }
    }

}
public sealed class AStateList : PStateList
{
    private TId _id_;
    private PTransition _transition_;
    private TypedList _state_lists_;

    public AStateList ()
    {
        this._state_lists_ = new TypedList(new StateLists_Cast(this));
    }

    public AStateList (
            TId _id_,
            PTransition _transition_,
            IList _state_lists_
    )
    {
        SetId (_id_);
        SetTransition (_transition_);
        this._state_lists_ = new TypedList(new StateLists_Cast(this));
        this._state_lists_.Clear();
        this._state_lists_.AddAll(_state_lists_);
    }

    public override Object Clone()
    {
        return new AStateList (
            (TId)CloneNode (_id_),
            (PTransition)CloneNode (_transition_),
            CloneList (_state_lists_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStateList(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PTransition GetTransition ()
    {
        return _transition_;
    }

    public void SetTransition (PTransition node)
    {
        if(_transition_ != null)
        {
            _transition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _transition_ = node;
    }
    public IList GetStateLists ()
    {
        return _state_lists_;
    }

    public void setStateLists (IList list)
    {
        _state_lists_.Clear();
        _state_lists_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_transition_)
            + ToString (_state_lists_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _transition_ == child )
        {
            _transition_ = null;
            return;
        }
        if ( _state_lists_.Contains(child) )
        {
            _state_lists_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _transition_ == oldChild )
        {
            SetTransition ((PTransition) newChild);
            return;
        }
        for ( int i = 0; i < _state_lists_.Count; i++ )
        {
            Node n = (Node)_state_lists_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _state_lists_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _state_lists_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class StateLists_Cast : Cast
    {
        AStateList obj;

        internal StateLists_Cast (AStateList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStateListTail node = (PStateListTail) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStateListTail node = (PStateListTail) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AStateListTail : PStateListTail
{
    private TId _id_;
    private PTransition _transition_;

    public AStateListTail ()
    {
    }

    public AStateListTail (
            TId _id_,
            PTransition _transition_
    )
    {
        SetId (_id_);
        SetTransition (_transition_);
    }

    public override Object Clone()
    {
        return new AStateListTail (
            (TId)CloneNode (_id_),
            (PTransition)CloneNode (_transition_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStateListTail(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PTransition GetTransition ()
    {
        return _transition_;
    }

    public void SetTransition (PTransition node)
    {
        if(_transition_ != null)
        {
            _transition_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _transition_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_transition_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _transition_ == child )
        {
            _transition_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _transition_ == oldChild )
        {
            SetTransition ((PTransition) newChild);
            return;
        }
    }

}
public sealed class ATransition : PTransition
{
    private TId _id_;

    public ATransition ()
    {
    }

    public ATransition (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ATransition (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATransition(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AIgnTokens : PIgnTokens
{
    private TypedList _list_id_;

    public AIgnTokens ()
    {
        this._list_id_ = new TypedList(new ListId_Cast(this));
    }

    public AIgnTokens (
            IList _list_id_
    )
    {
        this._list_id_ = new TypedList(new ListId_Cast(this));
        this._list_id_.Clear();
        this._list_id_.AddAll(_list_id_);
    }

    public override Object Clone()
    {
        return new AIgnTokens (
            CloneList (_list_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIgnTokens(this);
    }

    public IList GetListId ()
    {
        return _list_id_;
    }

    public void setListId (IList list)
    {
        _list_id_.Clear();
        _list_id_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_list_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _list_id_.Contains(child) )
        {
            _list_id_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _list_id_.Count; i++ )
        {
            Node n = (Node)_list_id_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _list_id_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _list_id_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class ListId_Cast : Cast
    {
        AIgnTokens obj;

        internal ListId_Cast (AIgnTokens obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TId node = (TId) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TId node = (TId) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ARegExp : PRegExp
{
    private TypedList _concats_;

    public ARegExp ()
    {
        this._concats_ = new TypedList(new Concats_Cast(this));
    }

    public ARegExp (
            IList _concats_
    )
    {
        this._concats_ = new TypedList(new Concats_Cast(this));
        this._concats_.Clear();
        this._concats_.AddAll(_concats_);
    }

    public override Object Clone()
    {
        return new ARegExp (
            CloneList (_concats_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARegExp(this);
    }

    public IList GetConcats ()
    {
        return _concats_;
    }

    public void setConcats (IList list)
    {
        _concats_.Clear();
        _concats_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_concats_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _concats_.Contains(child) )
        {
            _concats_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _concats_.Count; i++ )
        {
            Node n = (Node)_concats_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _concats_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _concats_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Concats_Cast : Cast
    {
        ARegExp obj;

        internal Concats_Cast (ARegExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PConcat node = (PConcat) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PConcat node = (PConcat) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AConcat : PConcat
{
    private TypedList _un_exps_;

    public AConcat ()
    {
        this._un_exps_ = new TypedList(new UnExps_Cast(this));
    }

    public AConcat (
            IList _un_exps_
    )
    {
        this._un_exps_ = new TypedList(new UnExps_Cast(this));
        this._un_exps_.Clear();
        this._un_exps_.AddAll(_un_exps_);
    }

    public override Object Clone()
    {
        return new AConcat (
            CloneList (_un_exps_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConcat(this);
    }

    public IList GetUnExps ()
    {
        return _un_exps_;
    }

    public void setUnExps (IList list)
    {
        _un_exps_.Clear();
        _un_exps_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_un_exps_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _un_exps_.Contains(child) )
        {
            _un_exps_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _un_exps_.Count; i++ )
        {
            Node n = (Node)_un_exps_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _un_exps_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _un_exps_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class UnExps_Cast : Cast
    {
        AConcat obj;

        internal UnExps_Cast (AConcat obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PUnExp node = (PUnExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PUnExp node = (PUnExp) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AUnExp : PUnExp
{
    private PBasic _basic_;
    private PUnOp _un_op_;

    public AUnExp ()
    {
    }

    public AUnExp (
            PBasic _basic_,
            PUnOp _un_op_
    )
    {
        SetBasic (_basic_);
        SetUnOp (_un_op_);
    }

    public override Object Clone()
    {
        return new AUnExp (
            (PBasic)CloneNode (_basic_),
            (PUnOp)CloneNode (_un_op_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAUnExp(this);
    }

    public PBasic GetBasic ()
    {
        return _basic_;
    }

    public void SetBasic (PBasic node)
    {
        if(_basic_ != null)
        {
            _basic_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _basic_ = node;
    }
    public PUnOp GetUnOp ()
    {
        return _un_op_;
    }

    public void SetUnOp (PUnOp node)
    {
        if(_un_op_ != null)
        {
            _un_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _un_op_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_basic_)
            + ToString (_un_op_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _basic_ == child )
        {
            _basic_ = null;
            return;
        }
        if ( _un_op_ == child )
        {
            _un_op_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _basic_ == oldChild )
        {
            SetBasic ((PBasic) newChild);
            return;
        }
        if ( _un_op_ == oldChild )
        {
            SetUnOp ((PUnOp) newChild);
            return;
        }
    }

}
public sealed class ACharBasic : PBasic
{
    private PChar _char_;

    public ACharBasic ()
    {
    }

    public ACharBasic (
            PChar _char_
    )
    {
        SetChar (_char_);
    }

    public override Object Clone()
    {
        return new ACharBasic (
            (PChar)CloneNode (_char_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharBasic(this);
    }

    public PChar GetChar ()
    {
        return _char_;
    }

    public void SetChar (PChar node)
    {
        if(_char_ != null)
        {
            _char_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _char_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_char_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _char_ == child )
        {
            _char_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _char_ == oldChild )
        {
            SetChar ((PChar) newChild);
            return;
        }
    }

}
public sealed class ASetBasic : PBasic
{
    private PSet _set_;

    public ASetBasic ()
    {
    }

    public ASetBasic (
            PSet _set_
    )
    {
        SetSet (_set_);
    }

    public override Object Clone()
    {
        return new ASetBasic (
            (PSet)CloneNode (_set_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASetBasic(this);
    }

    public PSet GetSet ()
    {
        return _set_;
    }

    public void SetSet (PSet node)
    {
        if(_set_ != null)
        {
            _set_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _set_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_set_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _set_ == child )
        {
            _set_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _set_ == oldChild )
        {
            SetSet ((PSet) newChild);
            return;
        }
    }

}
public sealed class AStringBasic : PBasic
{
    private TString _string_;

    public AStringBasic ()
    {
    }

    public AStringBasic (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringBasic (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringBasic(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AIdBasic : PBasic
{
    private TId _id_;

    public AIdBasic ()
    {
    }

    public AIdBasic (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIdBasic (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdBasic(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ARegExpBasic : PBasic
{
    private PRegExp _reg_exp_;

    public ARegExpBasic ()
    {
    }

    public ARegExpBasic (
            PRegExp _reg_exp_
    )
    {
        SetRegExp (_reg_exp_);
    }

    public override Object Clone()
    {
        return new ARegExpBasic (
            (PRegExp)CloneNode (_reg_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARegExpBasic(this);
    }

    public PRegExp GetRegExp ()
    {
        return _reg_exp_;
    }

    public void SetRegExp (PRegExp node)
    {
        if(_reg_exp_ != null)
        {
            _reg_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _reg_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_reg_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _reg_exp_ == child )
        {
            _reg_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _reg_exp_ == oldChild )
        {
            SetRegExp ((PRegExp) newChild);
            return;
        }
    }

}
public sealed class ACharChar : PChar
{
    private TChar _char_;

    public ACharChar ()
    {
    }

    public ACharChar (
            TChar _char_
    )
    {
        SetChar (_char_);
    }

    public override Object Clone()
    {
        return new ACharChar (
            (TChar)CloneNode (_char_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACharChar(this);
    }

    public TChar GetChar ()
    {
        return _char_;
    }

    public void SetChar (TChar node)
    {
        if(_char_ != null)
        {
            _char_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _char_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_char_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _char_ == child )
        {
            _char_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _char_ == oldChild )
        {
            SetChar ((TChar) newChild);
            return;
        }
    }

}
public sealed class ADecChar : PChar
{
    private TDecChar _dec_char_;

    public ADecChar ()
    {
    }

    public ADecChar (
            TDecChar _dec_char_
    )
    {
        SetDecChar (_dec_char_);
    }

    public override Object Clone()
    {
        return new ADecChar (
            (TDecChar)CloneNode (_dec_char_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADecChar(this);
    }

    public TDecChar GetDecChar ()
    {
        return _dec_char_;
    }

    public void SetDecChar (TDecChar node)
    {
        if(_dec_char_ != null)
        {
            _dec_char_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _dec_char_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_dec_char_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _dec_char_ == child )
        {
            _dec_char_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _dec_char_ == oldChild )
        {
            SetDecChar ((TDecChar) newChild);
            return;
        }
    }

}
public sealed class AHexChar : PChar
{
    private THexChar _hex_char_;

    public AHexChar ()
    {
    }

    public AHexChar (
            THexChar _hex_char_
    )
    {
        SetHexChar (_hex_char_);
    }

    public override Object Clone()
    {
        return new AHexChar (
            (THexChar)CloneNode (_hex_char_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHexChar(this);
    }

    public THexChar GetHexChar ()
    {
        return _hex_char_;
    }

    public void SetHexChar (THexChar node)
    {
        if(_hex_char_ != null)
        {
            _hex_char_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _hex_char_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_hex_char_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _hex_char_ == child )
        {
            _hex_char_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _hex_char_ == oldChild )
        {
            SetHexChar ((THexChar) newChild);
            return;
        }
    }

}
public sealed class AOperationSet : PSet
{
    private PBasic _left_;
    private PBinOp _bin_op_;
    private PBasic _right_;

    public AOperationSet ()
    {
    }

    public AOperationSet (
            PBasic _left_,
            PBinOp _bin_op_,
            PBasic _right_
    )
    {
        SetLeft (_left_);
        SetBinOp (_bin_op_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AOperationSet (
            (PBasic)CloneNode (_left_),
            (PBinOp)CloneNode (_bin_op_),
            (PBasic)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOperationSet(this);
    }

    public PBasic GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PBasic node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PBinOp GetBinOp ()
    {
        return _bin_op_;
    }

    public void SetBinOp (PBinOp node)
    {
        if(_bin_op_ != null)
        {
            _bin_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bin_op_ = node;
    }
    public PBasic GetRight ()
    {
        return _right_;
    }

    public void SetRight (PBasic node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_bin_op_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _bin_op_ == child )
        {
            _bin_op_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PBasic) newChild);
            return;
        }
        if ( _bin_op_ == oldChild )
        {
            SetBinOp ((PBinOp) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PBasic) newChild);
            return;
        }
    }

}
public sealed class AIntervalSet : PSet
{
    private PChar _left_;
    private PChar _right_;

    public AIntervalSet ()
    {
    }

    public AIntervalSet (
            PChar _left_,
            PChar _right_
    )
    {
        SetLeft (_left_);
        SetRight (_right_);
    }

    public override Object Clone()
    {
        return new AIntervalSet (
            (PChar)CloneNode (_left_),
            (PChar)CloneNode (_right_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntervalSet(this);
    }

    public PChar GetLeft ()
    {
        return _left_;
    }

    public void SetLeft (PChar node)
    {
        if(_left_ != null)
        {
            _left_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_ = node;
    }
    public PChar GetRight ()
    {
        return _right_;
    }

    public void SetRight (PChar node)
    {
        if(_right_ != null)
        {
            _right_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_)
            + ToString (_right_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_ == child )
        {
            _left_ = null;
            return;
        }
        if ( _right_ == child )
        {
            _right_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_ == oldChild )
        {
            SetLeft ((PChar) newChild);
            return;
        }
        if ( _right_ == oldChild )
        {
            SetRight ((PChar) newChild);
            return;
        }
    }

}
public sealed class AStarUnOp : PUnOp
{
    private TStar _star_;

    public AStarUnOp ()
    {
    }

    public AStarUnOp (
            TStar _star_
    )
    {
        SetStar (_star_);
    }

    public override Object Clone()
    {
        return new AStarUnOp (
            (TStar)CloneNode (_star_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStarUnOp(this);
    }

    public TStar GetStar ()
    {
        return _star_;
    }

    public void SetStar (TStar node)
    {
        if(_star_ != null)
        {
            _star_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _star_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_star_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _star_ == child )
        {
            _star_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _star_ == oldChild )
        {
            SetStar ((TStar) newChild);
            return;
        }
    }

}
public sealed class AQMarkUnOp : PUnOp
{
    private TQMark _q_mark_;

    public AQMarkUnOp ()
    {
    }

    public AQMarkUnOp (
            TQMark _q_mark_
    )
    {
        SetQMark (_q_mark_);
    }

    public override Object Clone()
    {
        return new AQMarkUnOp (
            (TQMark)CloneNode (_q_mark_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAQMarkUnOp(this);
    }

    public TQMark GetQMark ()
    {
        return _q_mark_;
    }

    public void SetQMark (TQMark node)
    {
        if(_q_mark_ != null)
        {
            _q_mark_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _q_mark_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_q_mark_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _q_mark_ == child )
        {
            _q_mark_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _q_mark_ == oldChild )
        {
            SetQMark ((TQMark) newChild);
            return;
        }
    }

}
public sealed class APlusUnOp : PUnOp
{
    private TPlus _plus_;

    public APlusUnOp ()
    {
    }

    public APlusUnOp (
            TPlus _plus_
    )
    {
        SetPlus (_plus_);
    }

    public override Object Clone()
    {
        return new APlusUnOp (
            (TPlus)CloneNode (_plus_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusUnOp(this);
    }

    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_plus_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
    }

}
public sealed class APlusBinOp : PBinOp
{


    public APlusBinOp (
    )
    {
    }

    public override Object Clone()
    {
        return new APlusBinOp (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusBinOp(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMinusBinOp : PBinOp
{


    public AMinusBinOp (
    )
    {
    }

    public override Object Clone()
    {
        return new AMinusBinOp (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusBinOp(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AProductions : PProductions
{
    private TypedList _prods_;

    public AProductions ()
    {
        this._prods_ = new TypedList(new Prods_Cast(this));
    }

    public AProductions (
            IList _prods_
    )
    {
        this._prods_ = new TypedList(new Prods_Cast(this));
        this._prods_.Clear();
        this._prods_.AddAll(_prods_);
    }

    public override Object Clone()
    {
        return new AProductions (
            CloneList (_prods_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProductions(this);
    }

    public IList GetProds ()
    {
        return _prods_;
    }

    public void setProds (IList list)
    {
        _prods_.Clear();
        _prods_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_prods_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _prods_.Contains(child) )
        {
            _prods_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _prods_.Count; i++ )
        {
            Node n = (Node)_prods_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _prods_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _prods_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Prods_Cast : Cast
    {
        AProductions obj;

        internal Prods_Cast (AProductions obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PProd node = (PProd) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PProd node = (PProd) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AProd : PProd
{
    private TId _id_;
    private TArrow _arrow_;
    private TypedList _prod_transform_;
    private TypedList _alts_;

    public AProd ()
    {
        this._prod_transform_ = new TypedList(new ProdTransform_Cast(this));
        this._alts_ = new TypedList(new Alts_Cast(this));
    }

    public AProd (
            TId _id_,
            TArrow _arrow_,
            IList _prod_transform_,
            IList _alts_
    )
    {
        SetId (_id_);
        SetArrow (_arrow_);
        this._prod_transform_ = new TypedList(new ProdTransform_Cast(this));
        this._prod_transform_.Clear();
        this._prod_transform_.AddAll(_prod_transform_);
        this._alts_ = new TypedList(new Alts_Cast(this));
        this._alts_.Clear();
        this._alts_.AddAll(_alts_);
    }

    public override Object Clone()
    {
        return new AProd (
            (TId)CloneNode (_id_),
            (TArrow)CloneNode (_arrow_),
            CloneList (_prod_transform_),
            CloneList (_alts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProd(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TArrow GetArrow ()
    {
        return _arrow_;
    }

    public void SetArrow (TArrow node)
    {
        if(_arrow_ != null)
        {
            _arrow_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _arrow_ = node;
    }
    public IList GetProdTransform ()
    {
        return _prod_transform_;
    }

    public void setProdTransform (IList list)
    {
        _prod_transform_.Clear();
        _prod_transform_.AddAll(list);
    }
    public IList GetAlts ()
    {
        return _alts_;
    }

    public void setAlts (IList list)
    {
        _alts_.Clear();
        _alts_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_arrow_)
            + ToString (_prod_transform_)
            + ToString (_alts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _arrow_ == child )
        {
            _arrow_ = null;
            return;
        }
        if ( _prod_transform_.Contains(child) )
        {
            _prod_transform_.Remove(child);
            return;
        }
        if ( _alts_.Contains(child) )
        {
            _alts_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _arrow_ == oldChild )
        {
            SetArrow ((TArrow) newChild);
            return;
        }
        for ( int i = 0; i < _prod_transform_.Count; i++ )
        {
            Node n = (Node)_prod_transform_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _prod_transform_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _prod_transform_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        for ( int i = 0; i < _alts_.Count; i++ )
        {
            Node n = (Node)_alts_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _alts_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _alts_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class ProdTransform_Cast : Cast
    {
        AProd obj;

        internal ProdTransform_Cast (AProd obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PElem node = (PElem) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PElem node = (PElem) o;
            node.Parent(null);
            return node;
        }
    }
    private class Alts_Cast : Cast
    {
        AProd obj;

        internal Alts_Cast (AProd obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PAlt node = (PAlt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PAlt node = (PAlt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AParsedAlt : PAlt
{
    private TId _alt_name_;
    private TypedList _elems_;
    private PAltTransform _alt_transform_;

    public AParsedAlt ()
    {
        this._elems_ = new TypedList(new Elems_Cast(this));
    }

    public AParsedAlt (
            TId _alt_name_,
            IList _elems_,
            PAltTransform _alt_transform_
    )
    {
        SetAltName (_alt_name_);
        this._elems_ = new TypedList(new Elems_Cast(this));
        this._elems_.Clear();
        this._elems_.AddAll(_elems_);
        SetAltTransform (_alt_transform_);
    }

    public override Object Clone()
    {
        return new AParsedAlt (
            (TId)CloneNode (_alt_name_),
            CloneList (_elems_),
            (PAltTransform)CloneNode (_alt_transform_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParsedAlt(this);
    }

    public TId GetAltName ()
    {
        return _alt_name_;
    }

    public void SetAltName (TId node)
    {
        if(_alt_name_ != null)
        {
            _alt_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alt_name_ = node;
    }
    public IList GetElems ()
    {
        return _elems_;
    }

    public void setElems (IList list)
    {
        _elems_.Clear();
        _elems_.AddAll(list);
    }
    public PAltTransform GetAltTransform ()
    {
        return _alt_transform_;
    }

    public void SetAltTransform (PAltTransform node)
    {
        if(_alt_transform_ != null)
        {
            _alt_transform_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alt_transform_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_alt_name_)
            + ToString (_elems_)
            + ToString (_alt_transform_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _alt_name_ == child )
        {
            _alt_name_ = null;
            return;
        }
        if ( _elems_.Contains(child) )
        {
            _elems_.Remove(child);
            return;
        }
        if ( _alt_transform_ == child )
        {
            _alt_transform_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _alt_name_ == oldChild )
        {
            SetAltName ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _elems_.Count; i++ )
        {
            Node n = (Node)_elems_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _elems_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _elems_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _alt_transform_ == oldChild )
        {
            SetAltTransform ((PAltTransform) newChild);
            return;
        }
    }

    private class Elems_Cast : Cast
    {
        AParsedAlt obj;

        internal Elems_Cast (AParsedAlt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PElem node = (PElem) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PElem node = (PElem) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAltTransform : PAltTransform
{
    private TLBrace _l_brace_;
    private TypedList _terms_;
    private TRBrace _r_brace_;

    public AAltTransform ()
    {
        this._terms_ = new TypedList(new Terms_Cast(this));
    }

    public AAltTransform (
            TLBrace _l_brace_,
            IList _terms_,
            TRBrace _r_brace_
    )
    {
        SetLBrace (_l_brace_);
        this._terms_ = new TypedList(new Terms_Cast(this));
        this._terms_.Clear();
        this._terms_.AddAll(_terms_);
        SetRBrace (_r_brace_);
    }

    public override Object Clone()
    {
        return new AAltTransform (
            (TLBrace)CloneNode (_l_brace_),
            CloneList (_terms_),
            (TRBrace)CloneNode (_r_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAltTransform(this);
    }

    public TLBrace GetLBrace ()
    {
        return _l_brace_;
    }

    public void SetLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_brace_ = node;
    }
    public IList GetTerms ()
    {
        return _terms_;
    }

    public void setTerms (IList list)
    {
        _terms_.Clear();
        _terms_.AddAll(list);
    }
    public TRBrace GetRBrace ()
    {
        return _r_brace_;
    }

    public void SetRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_brace_)
            + ToString (_terms_)
            + ToString (_r_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _terms_.Contains(child) )
        {
            _terms_.Remove(child);
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_brace_ == oldChild )
        {
            SetLBrace ((TLBrace) newChild);
            return;
        }
        for ( int i = 0; i < _terms_.Count; i++ )
        {
            Node n = (Node)_terms_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _terms_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _terms_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _r_brace_ == oldChild )
        {
            SetRBrace ((TRBrace) newChild);
            return;
        }
    }

    private class Terms_Cast : Cast
    {
        AAltTransform obj;

        internal Terms_Cast (AAltTransform obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PTerm node = (PTerm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PTerm node = (PTerm) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ANewTerm : PTerm
{
    private PProdName _prod_name_;
    private TLPar _l_par_;
    private TypedList _params_;

    public ANewTerm ()
    {
        this._params_ = new TypedList(new Params_Cast(this));
    }

    public ANewTerm (
            PProdName _prod_name_,
            TLPar _l_par_,
            IList _params_
    )
    {
        SetProdName (_prod_name_);
        SetLPar (_l_par_);
        this._params_ = new TypedList(new Params_Cast(this));
        this._params_.Clear();
        this._params_.AddAll(_params_);
    }

    public override Object Clone()
    {
        return new ANewTerm (
            (PProdName)CloneNode (_prod_name_),
            (TLPar)CloneNode (_l_par_),
            CloneList (_params_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewTerm(this);
    }

    public PProdName GetProdName ()
    {
        return _prod_name_;
    }

    public void SetProdName (PProdName node)
    {
        if(_prod_name_ != null)
        {
            _prod_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _prod_name_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public IList GetParams ()
    {
        return _params_;
    }

    public void setParams (IList list)
    {
        _params_.Clear();
        _params_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_prod_name_)
            + ToString (_l_par_)
            + ToString (_params_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _prod_name_ == child )
        {
            _prod_name_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _params_.Contains(child) )
        {
            _params_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _prod_name_ == oldChild )
        {
            SetProdName ((PProdName) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        for ( int i = 0; i < _params_.Count; i++ )
        {
            Node n = (Node)_params_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _params_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _params_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Params_Cast : Cast
    {
        ANewTerm obj;

        internal Params_Cast (ANewTerm obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PTerm node = (PTerm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PTerm node = (PTerm) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AListTerm : PTerm
{
    private TLBkt _l_bkt_;
    private TypedList _list_terms_;

    public AListTerm ()
    {
        this._list_terms_ = new TypedList(new ListTerms_Cast(this));
    }

    public AListTerm (
            TLBkt _l_bkt_,
            IList _list_terms_
    )
    {
        SetLBkt (_l_bkt_);
        this._list_terms_ = new TypedList(new ListTerms_Cast(this));
        this._list_terms_.Clear();
        this._list_terms_.AddAll(_list_terms_);
    }

    public override Object Clone()
    {
        return new AListTerm (
            (TLBkt)CloneNode (_l_bkt_),
            CloneList (_list_terms_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListTerm(this);
    }

    public TLBkt GetLBkt ()
    {
        return _l_bkt_;
    }

    public void SetLBkt (TLBkt node)
    {
        if(_l_bkt_ != null)
        {
            _l_bkt_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_bkt_ = node;
    }
    public IList GetListTerms ()
    {
        return _list_terms_;
    }

    public void setListTerms (IList list)
    {
        _list_terms_.Clear();
        _list_terms_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_bkt_)
            + ToString (_list_terms_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_bkt_ == child )
        {
            _l_bkt_ = null;
            return;
        }
        if ( _list_terms_.Contains(child) )
        {
            _list_terms_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_bkt_ == oldChild )
        {
            SetLBkt ((TLBkt) newChild);
            return;
        }
        for ( int i = 0; i < _list_terms_.Count; i++ )
        {
            Node n = (Node)_list_terms_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _list_terms_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _list_terms_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class ListTerms_Cast : Cast
    {
        AListTerm obj;

        internal ListTerms_Cast (AListTerm obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PListTerm node = (PListTerm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PListTerm node = (PListTerm) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ASimpleTerm : PTerm
{
    private PSpecifier _specifier_;
    private TId _id_;
    private TId _simple_term_tail_;

    public ASimpleTerm ()
    {
    }

    public ASimpleTerm (
            PSpecifier _specifier_,
            TId _id_,
            TId _simple_term_tail_
    )
    {
        SetSpecifier (_specifier_);
        SetId (_id_);
        SetSimpleTermTail (_simple_term_tail_);
    }

    public override Object Clone()
    {
        return new ASimpleTerm (
            (PSpecifier)CloneNode (_specifier_),
            (TId)CloneNode (_id_),
            (TId)CloneNode (_simple_term_tail_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASimpleTerm(this);
    }

    public PSpecifier GetSpecifier ()
    {
        return _specifier_;
    }

    public void SetSpecifier (PSpecifier node)
    {
        if(_specifier_ != null)
        {
            _specifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _specifier_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TId GetSimpleTermTail ()
    {
        return _simple_term_tail_;
    }

    public void SetSimpleTermTail (TId node)
    {
        if(_simple_term_tail_ != null)
        {
            _simple_term_tail_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_term_tail_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_specifier_)
            + ToString (_id_)
            + ToString (_simple_term_tail_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _specifier_ == child )
        {
            _specifier_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _simple_term_tail_ == child )
        {
            _simple_term_tail_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _specifier_ == oldChild )
        {
            SetSpecifier ((PSpecifier) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _simple_term_tail_ == oldChild )
        {
            SetSimpleTermTail ((TId) newChild);
            return;
        }
    }

}
public sealed class ANullTerm : PTerm
{


    public ANullTerm (
    )
    {
    }

    public override Object Clone()
    {
        return new ANullTerm (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANullTerm(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ANewListTerm : PListTerm
{
    private PProdName _prod_name_;
    private TLPar _l_par_;
    private TypedList _params_;

    public ANewListTerm ()
    {
        this._params_ = new TypedList(new Params_Cast(this));
    }

    public ANewListTerm (
            PProdName _prod_name_,
            TLPar _l_par_,
            IList _params_
    )
    {
        SetProdName (_prod_name_);
        SetLPar (_l_par_);
        this._params_ = new TypedList(new Params_Cast(this));
        this._params_.Clear();
        this._params_.AddAll(_params_);
    }

    public override Object Clone()
    {
        return new ANewListTerm (
            (PProdName)CloneNode (_prod_name_),
            (TLPar)CloneNode (_l_par_),
            CloneList (_params_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewListTerm(this);
    }

    public PProdName GetProdName ()
    {
        return _prod_name_;
    }

    public void SetProdName (PProdName node)
    {
        if(_prod_name_ != null)
        {
            _prod_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _prod_name_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public IList GetParams ()
    {
        return _params_;
    }

    public void setParams (IList list)
    {
        _params_.Clear();
        _params_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_prod_name_)
            + ToString (_l_par_)
            + ToString (_params_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _prod_name_ == child )
        {
            _prod_name_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _params_.Contains(child) )
        {
            _params_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _prod_name_ == oldChild )
        {
            SetProdName ((PProdName) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        for ( int i = 0; i < _params_.Count; i++ )
        {
            Node n = (Node)_params_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _params_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _params_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Params_Cast : Cast
    {
        ANewListTerm obj;

        internal Params_Cast (ANewListTerm obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PTerm node = (PTerm) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PTerm node = (PTerm) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ASimpleListTerm : PListTerm
{
    private PSpecifier _specifier_;
    private TId _id_;
    private TId _simple_term_tail_;

    public ASimpleListTerm ()
    {
    }

    public ASimpleListTerm (
            PSpecifier _specifier_,
            TId _id_,
            TId _simple_term_tail_
    )
    {
        SetSpecifier (_specifier_);
        SetId (_id_);
        SetSimpleTermTail (_simple_term_tail_);
    }

    public override Object Clone()
    {
        return new ASimpleListTerm (
            (PSpecifier)CloneNode (_specifier_),
            (TId)CloneNode (_id_),
            (TId)CloneNode (_simple_term_tail_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASimpleListTerm(this);
    }

    public PSpecifier GetSpecifier ()
    {
        return _specifier_;
    }

    public void SetSpecifier (PSpecifier node)
    {
        if(_specifier_ != null)
        {
            _specifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _specifier_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TId GetSimpleTermTail ()
    {
        return _simple_term_tail_;
    }

    public void SetSimpleTermTail (TId node)
    {
        if(_simple_term_tail_ != null)
        {
            _simple_term_tail_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _simple_term_tail_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_specifier_)
            + ToString (_id_)
            + ToString (_simple_term_tail_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _specifier_ == child )
        {
            _specifier_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _simple_term_tail_ == child )
        {
            _simple_term_tail_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _specifier_ == oldChild )
        {
            SetSpecifier ((PSpecifier) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _simple_term_tail_ == oldChild )
        {
            SetSimpleTermTail ((TId) newChild);
            return;
        }
    }

}
public sealed class AProdName : PProdName
{
    private TId _id_;
    private TId _prod_name_tail_;

    public AProdName ()
    {
    }

    public AProdName (
            TId _id_,
            TId _prod_name_tail_
    )
    {
        SetId (_id_);
        SetProdNameTail (_prod_name_tail_);
    }

    public override Object Clone()
    {
        return new AProdName (
            (TId)CloneNode (_id_),
            (TId)CloneNode (_prod_name_tail_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProdName(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TId GetProdNameTail ()
    {
        return _prod_name_tail_;
    }

    public void SetProdNameTail (TId node)
    {
        if(_prod_name_tail_ != null)
        {
            _prod_name_tail_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _prod_name_tail_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_prod_name_tail_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _prod_name_tail_ == child )
        {
            _prod_name_tail_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _prod_name_tail_ == oldChild )
        {
            SetProdNameTail ((TId) newChild);
            return;
        }
    }

}
public sealed class AElem : PElem
{
    private TId _elem_name_;
    private PSpecifier _specifier_;
    private TId _id_;
    private PUnOp _un_op_;

    public AElem ()
    {
    }

    public AElem (
            TId _elem_name_,
            PSpecifier _specifier_,
            TId _id_,
            PUnOp _un_op_
    )
    {
        SetElemName (_elem_name_);
        SetSpecifier (_specifier_);
        SetId (_id_);
        SetUnOp (_un_op_);
    }

    public override Object Clone()
    {
        return new AElem (
            (TId)CloneNode (_elem_name_),
            (PSpecifier)CloneNode (_specifier_),
            (TId)CloneNode (_id_),
            (PUnOp)CloneNode (_un_op_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAElem(this);
    }

    public TId GetElemName ()
    {
        return _elem_name_;
    }

    public void SetElemName (TId node)
    {
        if(_elem_name_ != null)
        {
            _elem_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _elem_name_ = node;
    }
    public PSpecifier GetSpecifier ()
    {
        return _specifier_;
    }

    public void SetSpecifier (PSpecifier node)
    {
        if(_specifier_ != null)
        {
            _specifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _specifier_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PUnOp GetUnOp ()
    {
        return _un_op_;
    }

    public void SetUnOp (PUnOp node)
    {
        if(_un_op_ != null)
        {
            _un_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _un_op_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_elem_name_)
            + ToString (_specifier_)
            + ToString (_id_)
            + ToString (_un_op_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _elem_name_ == child )
        {
            _elem_name_ = null;
            return;
        }
        if ( _specifier_ == child )
        {
            _specifier_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _un_op_ == child )
        {
            _un_op_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _elem_name_ == oldChild )
        {
            SetElemName ((TId) newChild);
            return;
        }
        if ( _specifier_ == oldChild )
        {
            SetSpecifier ((PSpecifier) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _un_op_ == oldChild )
        {
            SetUnOp ((PUnOp) newChild);
            return;
        }
    }

}
public sealed class ATokenSpecifier : PSpecifier
{


    public ATokenSpecifier (
    )
    {
    }

    public override Object Clone()
    {
        return new ATokenSpecifier (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseATokenSpecifier(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AProductionSpecifier : PSpecifier
{


    public AProductionSpecifier (
    )
    {
    }

    public override Object Clone()
    {
        return new AProductionSpecifier (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProductionSpecifier(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAst : PAst
{
    private TypedList _prods_;

    public AAst ()
    {
        this._prods_ = new TypedList(new Prods_Cast(this));
    }

    public AAst (
            IList _prods_
    )
    {
        this._prods_ = new TypedList(new Prods_Cast(this));
        this._prods_.Clear();
        this._prods_.AddAll(_prods_);
    }

    public override Object Clone()
    {
        return new AAst (
            CloneList (_prods_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAst(this);
    }

    public IList GetProds ()
    {
        return _prods_;
    }

    public void setProds (IList list)
    {
        _prods_.Clear();
        _prods_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_prods_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _prods_.Contains(child) )
        {
            _prods_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _prods_.Count; i++ )
        {
            Node n = (Node)_prods_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _prods_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _prods_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Prods_Cast : Cast
    {
        AAst obj;

        internal Prods_Cast (AAst obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PAstProd node = (PAstProd) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PAstProd node = (PAstProd) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAstProd : PAstProd
{
    private TId _id_;
    private TypedList _alts_;

    public AAstProd ()
    {
        this._alts_ = new TypedList(new Alts_Cast(this));
    }

    public AAstProd (
            TId _id_,
            IList _alts_
    )
    {
        SetId (_id_);
        this._alts_ = new TypedList(new Alts_Cast(this));
        this._alts_.Clear();
        this._alts_.AddAll(_alts_);
    }

    public override Object Clone()
    {
        return new AAstProd (
            (TId)CloneNode (_id_),
            CloneList (_alts_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAstProd(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public IList GetAlts ()
    {
        return _alts_;
    }

    public void setAlts (IList list)
    {
        _alts_.Clear();
        _alts_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_alts_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _alts_.Contains(child) )
        {
            _alts_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _alts_.Count; i++ )
        {
            Node n = (Node)_alts_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _alts_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _alts_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Alts_Cast : Cast
    {
        AAstProd obj;

        internal Alts_Cast (AAstProd obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PAstAlt node = (PAstAlt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PAstAlt node = (PAstAlt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AAstAlt : PAstAlt
{
    private TId _alt_name_;
    private TypedList _elems_;

    public AAstAlt ()
    {
        this._elems_ = new TypedList(new Elems_Cast(this));
    }

    public AAstAlt (
            TId _alt_name_,
            IList _elems_
    )
    {
        SetAltName (_alt_name_);
        this._elems_ = new TypedList(new Elems_Cast(this));
        this._elems_.Clear();
        this._elems_.AddAll(_elems_);
    }

    public override Object Clone()
    {
        return new AAstAlt (
            (TId)CloneNode (_alt_name_),
            CloneList (_elems_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAstAlt(this);
    }

    public TId GetAltName ()
    {
        return _alt_name_;
    }

    public void SetAltName (TId node)
    {
        if(_alt_name_ != null)
        {
            _alt_name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _alt_name_ = node;
    }
    public IList GetElems ()
    {
        return _elems_;
    }

    public void setElems (IList list)
    {
        _elems_.Clear();
        _elems_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_alt_name_)
            + ToString (_elems_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _alt_name_ == child )
        {
            _alt_name_ = null;
            return;
        }
        if ( _elems_.Contains(child) )
        {
            _elems_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _alt_name_ == oldChild )
        {
            SetAltName ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _elems_.Count; i++ )
        {
            Node n = (Node)_elems_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _elems_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _elems_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Elems_Cast : Cast
    {
        AAstAlt obj;

        internal Elems_Cast (AAstAlt obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PElem node = (PElem) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PElem node = (PElem) o;
            node.Parent(null);
            return node;
        }
    }
}

public sealed class Start : Node
{
    private PGrammar _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PGrammar _base_,
        EOF _eof_)
    {
        SetPGrammar(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PGrammar) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PGrammar GetPGrammar()
    {
        return _base_;
    }
    public void SetPGrammar(PGrammar node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPGrammar((PGrammar) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
