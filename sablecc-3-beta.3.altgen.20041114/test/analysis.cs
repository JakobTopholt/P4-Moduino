/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using org.sablecc.sablecc.node;

namespace org.sablecc.sablecc.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAGrammar(AGrammar node);
    void CaseAHelpers(AHelpers node);
    void CaseAHelperDef(AHelperDef node);
    void CaseAStates(AStates node);
    void CaseATokens(ATokens node);
    void CaseATokenDef(ATokenDef node);
    void CaseAStateList(AStateList node);
    void CaseAStateListTail(AStateListTail node);
    void CaseATransition(ATransition node);
    void CaseAIgnTokens(AIgnTokens node);
    void CaseARegExp(ARegExp node);
    void CaseAConcat(AConcat node);
    void CaseAUnExp(AUnExp node);
    void CaseACharBasic(ACharBasic node);
    void CaseASetBasic(ASetBasic node);
    void CaseAStringBasic(AStringBasic node);
    void CaseAIdBasic(AIdBasic node);
    void CaseARegExpBasic(ARegExpBasic node);
    void CaseACharChar(ACharChar node);
    void CaseADecChar(ADecChar node);
    void CaseAHexChar(AHexChar node);
    void CaseAOperationSet(AOperationSet node);
    void CaseAIntervalSet(AIntervalSet node);
    void CaseAStarUnOp(AStarUnOp node);
    void CaseAQMarkUnOp(AQMarkUnOp node);
    void CaseAPlusUnOp(APlusUnOp node);
    void CaseAPlusBinOp(APlusBinOp node);
    void CaseAMinusBinOp(AMinusBinOp node);
    void CaseAProductions(AProductions node);
    void CaseAProd(AProd node);
    void CaseAParsedAlt(AParsedAlt node);
    void CaseAAltTransform(AAltTransform node);
    void CaseANewTerm(ANewTerm node);
    void CaseAListTerm(AListTerm node);
    void CaseASimpleTerm(ASimpleTerm node);
    void CaseANullTerm(ANullTerm node);
    void CaseANewListTerm(ANewListTerm node);
    void CaseASimpleListTerm(ASimpleListTerm node);
    void CaseAProdName(AProdName node);
    void CaseAElem(AElem node);
    void CaseATokenSpecifier(ATokenSpecifier node);
    void CaseAProductionSpecifier(AProductionSpecifier node);
    void CaseAAst(AAst node);
    void CaseAAstProd(AAstProd node);
    void CaseAAstAlt(AAstAlt node);

    void CaseTPkgId(TPkgId node);
    void CaseTPackage(TPackage node);
    void CaseTStates(TStates node);
    void CaseTHelpers(THelpers node);
    void CaseTTokens(TTokens node);
    void CaseTIgnored(TIgnored node);
    void CaseTProductions(TProductions node);
    void CaseTAbstract(TAbstract node);
    void CaseTSyntax(TSyntax node);
    void CaseTTree(TTree node);
    void CaseTNew(TNew node);
    void CaseTNull(TNull node);
    void CaseTTokenSpecifier(TTokenSpecifier node);
    void CaseTProductionSpecifier(TProductionSpecifier node);
    void CaseTDot(TDot node);
    void CaseTDDot(TDDot node);
    void CaseTSemicolon(TSemicolon node);
    void CaseTEqual(TEqual node);
    void CaseTLBkt(TLBkt node);
    void CaseTRBkt(TRBkt node);
    void CaseTLPar(TLPar node);
    void CaseTRPar(TRPar node);
    void CaseTLBrace(TLBrace node);
    void CaseTRBrace(TRBrace node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTQMark(TQMark node);
    void CaseTStar(TStar node);
    void CaseTBar(TBar node);
    void CaseTComma(TComma node);
    void CaseTSlash(TSlash node);
    void CaseTArrow(TArrow node);
    void CaseTColon(TColon node);
    void CaseTId(TId node);
    void CaseTChar(TChar node);
    void CaseTDecChar(TDecChar node);
    void CaseTHexChar(THexChar node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseTComment(TComment node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAGrammar(AGrammar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHelpers(AHelpers node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHelperDef(AHelperDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStates(AStates node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokens(ATokens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenDef(ATokenDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStateList(AStateList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStateListTail(AStateListTail node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATransition(ATransition node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIgnTokens(AIgnTokens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARegExp(ARegExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConcat(AConcat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAUnExp(AUnExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharBasic(ACharBasic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASetBasic(ASetBasic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringBasic(AStringBasic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdBasic(AIdBasic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARegExpBasic(ARegExpBasic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACharChar(ACharChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADecChar(ADecChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHexChar(AHexChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOperationSet(AOperationSet node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntervalSet(AIntervalSet node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStarUnOp(AStarUnOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAQMarkUnOp(AQMarkUnOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusUnOp(APlusUnOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusBinOp(APlusBinOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusBinOp(AMinusBinOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProductions(AProductions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProd(AProd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParsedAlt(AParsedAlt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAltTransform(AAltTransform node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANewTerm(ANewTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAListTerm(AListTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleTerm(ASimpleTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANullTerm(ANullTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANewListTerm(ANewListTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleListTerm(ASimpleListTerm node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProdName(AProdName node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElem(AElem node)
    {
        DefaultCase(node);
    }
    public virtual void CaseATokenSpecifier(ATokenSpecifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProductionSpecifier(AProductionSpecifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAst(AAst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAstProd(AAstProd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAstAlt(AAstAlt node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTPkgId(TPkgId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPackage(TPackage node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStates(TStates node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTHelpers(THelpers node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTokens(TTokens node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIgnored(TIgnored node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTProductions(TProductions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAbstract(TAbstract node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSyntax(TSyntax node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTree(TTree node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNew(TNew node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNull(TNull node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTokenSpecifier(TTokenSpecifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTProductionSpecifier(TProductionSpecifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDot(TDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDDot(TDDot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSemicolon(TSemicolon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBkt(TLBkt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBkt(TRBkt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLPar(TLPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRPar(TRPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLBrace(TLBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRBrace(TRBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTQMark(TQMark node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStar(TStar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBar(TBar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSlash(TSlash node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTArrow(TArrow node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTColon(TColon node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTChar(TChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDecChar(TDecChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTHexChar(THexChar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPGrammar().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAGrammar(AGrammar node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGrammar(AGrammar node)
    {
        DefaultOut(node);
    }

    public override void CaseAGrammar(AGrammar node)
    {
        InAGrammar(node);
        {
            Object[] temp = new Object[node.GetPackage().Count];
            node.GetPackage().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TPkgId) temp[i]).Apply(this);
            }
        }
        if(node.GetHelpers() != null)
        {
            node.GetHelpers().Apply(this);
        }
        if(node.GetStates() != null)
        {
            node.GetStates().Apply(this);
        }
        if(node.GetTokens() != null)
        {
            node.GetTokens().Apply(this);
        }
        if(node.GetIgnTokens() != null)
        {
            node.GetIgnTokens().Apply(this);
        }
        if(node.GetProductions() != null)
        {
            node.GetProductions().Apply(this);
        }
        if(node.GetAst() != null)
        {
            node.GetAst().Apply(this);
        }
        OutAGrammar(node);
    }
    public virtual void InAHelpers(AHelpers node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelpers(AHelpers node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelpers(AHelpers node)
    {
        InAHelpers(node);
        {
            Object[] temp = new Object[node.GetHelperDefs().Count];
            node.GetHelperDefs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PHelperDef) temp[i]).Apply(this);
            }
        }
        OutAHelpers(node);
    }
    public virtual void InAHelperDef(AHelperDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelperDef(AHelperDef node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelperDef(AHelperDef node)
    {
        InAHelperDef(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRegExp() != null)
        {
            node.GetRegExp().Apply(this);
        }
        OutAHelperDef(node);
    }
    public virtual void InAStates(AStates node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStates(AStates node)
    {
        DefaultOut(node);
    }

    public override void CaseAStates(AStates node)
    {
        InAStates(node);
        {
            Object[] temp = new Object[node.GetListId().Count];
            node.GetListId().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TId) temp[i]).Apply(this);
            }
        }
        OutAStates(node);
    }
    public virtual void InATokens(ATokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokens(ATokens node)
    {
        DefaultOut(node);
    }

    public override void CaseATokens(ATokens node)
    {
        InATokens(node);
        {
            Object[] temp = new Object[node.GetTokenDefs().Count];
            node.GetTokenDefs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PTokenDef) temp[i]).Apply(this);
            }
        }
        OutATokens(node);
    }
    public virtual void InATokenDef(ATokenDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenDef(ATokenDef node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenDef(ATokenDef node)
    {
        InATokenDef(node);
        if(node.GetStateList() != null)
        {
            node.GetStateList().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetRegExp() != null)
        {
            node.GetRegExp().Apply(this);
        }
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        if(node.GetLookAhead() != null)
        {
            node.GetLookAhead().Apply(this);
        }
        OutATokenDef(node);
    }
    public virtual void InAStateList(AStateList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStateList(AStateList node)
    {
        DefaultOut(node);
    }

    public override void CaseAStateList(AStateList node)
    {
        InAStateList(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTransition() != null)
        {
            node.GetTransition().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetStateLists().Count];
            node.GetStateLists().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStateListTail) temp[i]).Apply(this);
            }
        }
        OutAStateList(node);
    }
    public virtual void InAStateListTail(AStateListTail node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStateListTail(AStateListTail node)
    {
        DefaultOut(node);
    }

    public override void CaseAStateListTail(AStateListTail node)
    {
        InAStateListTail(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTransition() != null)
        {
            node.GetTransition().Apply(this);
        }
        OutAStateListTail(node);
    }
    public virtual void InATransition(ATransition node)
    {
        DefaultIn(node);
    }

    public virtual void OutATransition(ATransition node)
    {
        DefaultOut(node);
    }

    public override void CaseATransition(ATransition node)
    {
        InATransition(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutATransition(node);
    }
    public virtual void InAIgnTokens(AIgnTokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIgnTokens(AIgnTokens node)
    {
        DefaultOut(node);
    }

    public override void CaseAIgnTokens(AIgnTokens node)
    {
        InAIgnTokens(node);
        {
            Object[] temp = new Object[node.GetListId().Count];
            node.GetListId().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TId) temp[i]).Apply(this);
            }
        }
        OutAIgnTokens(node);
    }
    public virtual void InARegExp(ARegExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegExp(ARegExp node)
    {
        DefaultOut(node);
    }

    public override void CaseARegExp(ARegExp node)
    {
        InARegExp(node);
        {
            Object[] temp = new Object[node.GetConcats().Count];
            node.GetConcats().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PConcat) temp[i]).Apply(this);
            }
        }
        OutARegExp(node);
    }
    public virtual void InAConcat(AConcat node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConcat(AConcat node)
    {
        DefaultOut(node);
    }

    public override void CaseAConcat(AConcat node)
    {
        InAConcat(node);
        {
            Object[] temp = new Object[node.GetUnExps().Count];
            node.GetUnExps().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PUnExp) temp[i]).Apply(this);
            }
        }
        OutAConcat(node);
    }
    public virtual void InAUnExp(AUnExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnExp(AUnExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnExp(AUnExp node)
    {
        InAUnExp(node);
        if(node.GetBasic() != null)
        {
            node.GetBasic().Apply(this);
        }
        if(node.GetUnOp() != null)
        {
            node.GetUnOp().Apply(this);
        }
        OutAUnExp(node);
    }
    public virtual void InACharBasic(ACharBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharBasic(ACharBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseACharBasic(ACharBasic node)
    {
        InACharBasic(node);
        if(node.GetChar() != null)
        {
            node.GetChar().Apply(this);
        }
        OutACharBasic(node);
    }
    public virtual void InASetBasic(ASetBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetBasic(ASetBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseASetBasic(ASetBasic node)
    {
        InASetBasic(node);
        if(node.GetSet() != null)
        {
            node.GetSet().Apply(this);
        }
        OutASetBasic(node);
    }
    public virtual void InAStringBasic(AStringBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringBasic(AStringBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringBasic(AStringBasic node)
    {
        InAStringBasic(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringBasic(node);
    }
    public virtual void InAIdBasic(AIdBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdBasic(AIdBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdBasic(AIdBasic node)
    {
        InAIdBasic(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdBasic(node);
    }
    public virtual void InARegExpBasic(ARegExpBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegExpBasic(ARegExpBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseARegExpBasic(ARegExpBasic node)
    {
        InARegExpBasic(node);
        if(node.GetRegExp() != null)
        {
            node.GetRegExp().Apply(this);
        }
        OutARegExpBasic(node);
    }
    public virtual void InACharChar(ACharChar node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharChar(ACharChar node)
    {
        DefaultOut(node);
    }

    public override void CaseACharChar(ACharChar node)
    {
        InACharChar(node);
        if(node.GetChar() != null)
        {
            node.GetChar().Apply(this);
        }
        OutACharChar(node);
    }
    public virtual void InADecChar(ADecChar node)
    {
        DefaultIn(node);
    }

    public virtual void OutADecChar(ADecChar node)
    {
        DefaultOut(node);
    }

    public override void CaseADecChar(ADecChar node)
    {
        InADecChar(node);
        if(node.GetDecChar() != null)
        {
            node.GetDecChar().Apply(this);
        }
        OutADecChar(node);
    }
    public virtual void InAHexChar(AHexChar node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHexChar(AHexChar node)
    {
        DefaultOut(node);
    }

    public override void CaseAHexChar(AHexChar node)
    {
        InAHexChar(node);
        if(node.GetHexChar() != null)
        {
            node.GetHexChar().Apply(this);
        }
        OutAHexChar(node);
    }
    public virtual void InAOperationSet(AOperationSet node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOperationSet(AOperationSet node)
    {
        DefaultOut(node);
    }

    public override void CaseAOperationSet(AOperationSet node)
    {
        InAOperationSet(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetBinOp() != null)
        {
            node.GetBinOp().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAOperationSet(node);
    }
    public virtual void InAIntervalSet(AIntervalSet node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntervalSet(AIntervalSet node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntervalSet(AIntervalSet node)
    {
        InAIntervalSet(node);
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        OutAIntervalSet(node);
    }
    public virtual void InAStarUnOp(AStarUnOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarUnOp(AStarUnOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarUnOp(AStarUnOp node)
    {
        InAStarUnOp(node);
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        OutAStarUnOp(node);
    }
    public virtual void InAQMarkUnOp(AQMarkUnOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQMarkUnOp(AQMarkUnOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAQMarkUnOp(AQMarkUnOp node)
    {
        InAQMarkUnOp(node);
        if(node.GetQMark() != null)
        {
            node.GetQMark().Apply(this);
        }
        OutAQMarkUnOp(node);
    }
    public virtual void InAPlusUnOp(APlusUnOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusUnOp(APlusUnOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusUnOp(APlusUnOp node)
    {
        InAPlusUnOp(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAPlusUnOp(node);
    }
    public virtual void InAPlusBinOp(APlusBinOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusBinOp(APlusBinOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusBinOp(APlusBinOp node)
    {
        InAPlusBinOp(node);
        OutAPlusBinOp(node);
    }
    public virtual void InAMinusBinOp(AMinusBinOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusBinOp(AMinusBinOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusBinOp(AMinusBinOp node)
    {
        InAMinusBinOp(node);
        OutAMinusBinOp(node);
    }
    public virtual void InAProductions(AProductions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductions(AProductions node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductions(AProductions node)
    {
        InAProductions(node);
        {
            Object[] temp = new Object[node.GetProds().Count];
            node.GetProds().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PProd) temp[i]).Apply(this);
            }
        }
        OutAProductions(node);
    }
    public virtual void InAProd(AProd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProd(AProd node)
    {
        DefaultOut(node);
    }

    public override void CaseAProd(AProd node)
    {
        InAProd(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetProdTransform().Count];
            node.GetProdTransform().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PElem) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetAlts().Count];
            node.GetAlts().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PAlt) temp[i]).Apply(this);
            }
        }
        OutAProd(node);
    }
    public virtual void InAParsedAlt(AParsedAlt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParsedAlt(AParsedAlt node)
    {
        DefaultOut(node);
    }

    public override void CaseAParsedAlt(AParsedAlt node)
    {
        InAParsedAlt(node);
        if(node.GetAltName() != null)
        {
            node.GetAltName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetElems().Count];
            node.GetElems().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PElem) temp[i]).Apply(this);
            }
        }
        if(node.GetAltTransform() != null)
        {
            node.GetAltTransform().Apply(this);
        }
        OutAParsedAlt(node);
    }
    public virtual void InAAltTransform(AAltTransform node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAltTransform(AAltTransform node)
    {
        DefaultOut(node);
    }

    public override void CaseAAltTransform(AAltTransform node)
    {
        InAAltTransform(node);
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTerms().Count];
            node.GetTerms().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PTerm) temp[i]).Apply(this);
            }
        }
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        OutAAltTransform(node);
    }
    public virtual void InANewTerm(ANewTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewTerm(ANewTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseANewTerm(ANewTerm node)
    {
        InANewTerm(node);
        if(node.GetProdName() != null)
        {
            node.GetProdName().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParams().Count];
            node.GetParams().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PTerm) temp[i]).Apply(this);
            }
        }
        OutANewTerm(node);
    }
    public virtual void InAListTerm(AListTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAListTerm(AListTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseAListTerm(AListTerm node)
    {
        InAListTerm(node);
        if(node.GetLBkt() != null)
        {
            node.GetLBkt().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetListTerms().Count];
            node.GetListTerms().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PListTerm) temp[i]).Apply(this);
            }
        }
        OutAListTerm(node);
    }
    public virtual void InASimpleTerm(ASimpleTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleTerm(ASimpleTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleTerm(ASimpleTerm node)
    {
        InASimpleTerm(node);
        if(node.GetSpecifier() != null)
        {
            node.GetSpecifier().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetSimpleTermTail() != null)
        {
            node.GetSimpleTermTail().Apply(this);
        }
        OutASimpleTerm(node);
    }
    public virtual void InANullTerm(ANullTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullTerm(ANullTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseANullTerm(ANullTerm node)
    {
        InANullTerm(node);
        OutANullTerm(node);
    }
    public virtual void InANewListTerm(ANewListTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewListTerm(ANewListTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseANewListTerm(ANewListTerm node)
    {
        InANewListTerm(node);
        if(node.GetProdName() != null)
        {
            node.GetProdName().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetParams().Count];
            node.GetParams().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PTerm) temp[i]).Apply(this);
            }
        }
        OutANewListTerm(node);
    }
    public virtual void InASimpleListTerm(ASimpleListTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleListTerm(ASimpleListTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleListTerm(ASimpleListTerm node)
    {
        InASimpleListTerm(node);
        if(node.GetSpecifier() != null)
        {
            node.GetSpecifier().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetSimpleTermTail() != null)
        {
            node.GetSimpleTermTail().Apply(this);
        }
        OutASimpleListTerm(node);
    }
    public virtual void InAProdName(AProdName node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProdName(AProdName node)
    {
        DefaultOut(node);
    }

    public override void CaseAProdName(AProdName node)
    {
        InAProdName(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetProdNameTail() != null)
        {
            node.GetProdNameTail().Apply(this);
        }
        OutAProdName(node);
    }
    public virtual void InAElem(AElem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElem(AElem node)
    {
        DefaultOut(node);
    }

    public override void CaseAElem(AElem node)
    {
        InAElem(node);
        if(node.GetElemName() != null)
        {
            node.GetElemName().Apply(this);
        }
        if(node.GetSpecifier() != null)
        {
            node.GetSpecifier().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetUnOp() != null)
        {
            node.GetUnOp().Apply(this);
        }
        OutAElem(node);
    }
    public virtual void InATokenSpecifier(ATokenSpecifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenSpecifier(ATokenSpecifier node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenSpecifier(ATokenSpecifier node)
    {
        InATokenSpecifier(node);
        OutATokenSpecifier(node);
    }
    public virtual void InAProductionSpecifier(AProductionSpecifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductionSpecifier(AProductionSpecifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductionSpecifier(AProductionSpecifier node)
    {
        InAProductionSpecifier(node);
        OutAProductionSpecifier(node);
    }
    public virtual void InAAst(AAst node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAst(AAst node)
    {
        DefaultOut(node);
    }

    public override void CaseAAst(AAst node)
    {
        InAAst(node);
        {
            Object[] temp = new Object[node.GetProds().Count];
            node.GetProds().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PAstProd) temp[i]).Apply(this);
            }
        }
        OutAAst(node);
    }
    public virtual void InAAstProd(AAstProd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAstProd(AAstProd node)
    {
        DefaultOut(node);
    }

    public override void CaseAAstProd(AAstProd node)
    {
        InAAstProd(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetAlts().Count];
            node.GetAlts().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PAstAlt) temp[i]).Apply(this);
            }
        }
        OutAAstProd(node);
    }
    public virtual void InAAstAlt(AAstAlt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAstAlt(AAstAlt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAstAlt(AAstAlt node)
    {
        InAAstAlt(node);
        if(node.GetAltName() != null)
        {
            node.GetAltName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetElems().Count];
            node.GetElems().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PElem) temp[i]).Apply(this);
            }
        }
        OutAAstAlt(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPGrammar().Apply(this);
        OutStart(node);
    }

    public virtual void InAGrammar(AGrammar node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGrammar(AGrammar node)
    {
        DefaultOut(node);
    }

    public override void CaseAGrammar(AGrammar node)
    {
        InAGrammar(node);
        if(node.GetAst() != null)
        {
            node.GetAst().Apply(this);
        }
        if(node.GetProductions() != null)
        {
            node.GetProductions().Apply(this);
        }
        if(node.GetIgnTokens() != null)
        {
            node.GetIgnTokens().Apply(this);
        }
        if(node.GetTokens() != null)
        {
            node.GetTokens().Apply(this);
        }
        if(node.GetStates() != null)
        {
            node.GetStates().Apply(this);
        }
        if(node.GetHelpers() != null)
        {
            node.GetHelpers().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetPackage().Count];
            node.GetPackage().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TPkgId) temp[i]).Apply(this);
            }
        }
        OutAGrammar(node);
    }
    public virtual void InAHelpers(AHelpers node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelpers(AHelpers node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelpers(AHelpers node)
    {
        InAHelpers(node);
        {
            Object[] temp = new Object[node.GetHelperDefs().Count];
            node.GetHelperDefs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PHelperDef) temp[i]).Apply(this);
            }
        }
        OutAHelpers(node);
    }
    public virtual void InAHelperDef(AHelperDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelperDef(AHelperDef node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelperDef(AHelperDef node)
    {
        InAHelperDef(node);
        if(node.GetRegExp() != null)
        {
            node.GetRegExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAHelperDef(node);
    }
    public virtual void InAStates(AStates node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStates(AStates node)
    {
        DefaultOut(node);
    }

    public override void CaseAStates(AStates node)
    {
        InAStates(node);
        {
            Object[] temp = new Object[node.GetListId().Count];
            node.GetListId().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TId) temp[i]).Apply(this);
            }
        }
        OutAStates(node);
    }
    public virtual void InATokens(ATokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokens(ATokens node)
    {
        DefaultOut(node);
    }

    public override void CaseATokens(ATokens node)
    {
        InATokens(node);
        {
            Object[] temp = new Object[node.GetTokenDefs().Count];
            node.GetTokenDefs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PTokenDef) temp[i]).Apply(this);
            }
        }
        OutATokens(node);
    }
    public virtual void InATokenDef(ATokenDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenDef(ATokenDef node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenDef(ATokenDef node)
    {
        InATokenDef(node);
        if(node.GetLookAhead() != null)
        {
            node.GetLookAhead().Apply(this);
        }
        if(node.GetSlash() != null)
        {
            node.GetSlash().Apply(this);
        }
        if(node.GetRegExp() != null)
        {
            node.GetRegExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetStateList() != null)
        {
            node.GetStateList().Apply(this);
        }
        OutATokenDef(node);
    }
    public virtual void InAStateList(AStateList node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStateList(AStateList node)
    {
        DefaultOut(node);
    }

    public override void CaseAStateList(AStateList node)
    {
        InAStateList(node);
        {
            Object[] temp = new Object[node.GetStateLists().Count];
            node.GetStateLists().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStateListTail) temp[i]).Apply(this);
            }
        }
        if(node.GetTransition() != null)
        {
            node.GetTransition().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAStateList(node);
    }
    public virtual void InAStateListTail(AStateListTail node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStateListTail(AStateListTail node)
    {
        DefaultOut(node);
    }

    public override void CaseAStateListTail(AStateListTail node)
    {
        InAStateListTail(node);
        if(node.GetTransition() != null)
        {
            node.GetTransition().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAStateListTail(node);
    }
    public virtual void InATransition(ATransition node)
    {
        DefaultIn(node);
    }

    public virtual void OutATransition(ATransition node)
    {
        DefaultOut(node);
    }

    public override void CaseATransition(ATransition node)
    {
        InATransition(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutATransition(node);
    }
    public virtual void InAIgnTokens(AIgnTokens node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIgnTokens(AIgnTokens node)
    {
        DefaultOut(node);
    }

    public override void CaseAIgnTokens(AIgnTokens node)
    {
        InAIgnTokens(node);
        {
            Object[] temp = new Object[node.GetListId().Count];
            node.GetListId().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TId) temp[i]).Apply(this);
            }
        }
        OutAIgnTokens(node);
    }
    public virtual void InARegExp(ARegExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegExp(ARegExp node)
    {
        DefaultOut(node);
    }

    public override void CaseARegExp(ARegExp node)
    {
        InARegExp(node);
        {
            Object[] temp = new Object[node.GetConcats().Count];
            node.GetConcats().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PConcat) temp[i]).Apply(this);
            }
        }
        OutARegExp(node);
    }
    public virtual void InAConcat(AConcat node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConcat(AConcat node)
    {
        DefaultOut(node);
    }

    public override void CaseAConcat(AConcat node)
    {
        InAConcat(node);
        {
            Object[] temp = new Object[node.GetUnExps().Count];
            node.GetUnExps().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PUnExp) temp[i]).Apply(this);
            }
        }
        OutAConcat(node);
    }
    public virtual void InAUnExp(AUnExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAUnExp(AUnExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAUnExp(AUnExp node)
    {
        InAUnExp(node);
        if(node.GetUnOp() != null)
        {
            node.GetUnOp().Apply(this);
        }
        if(node.GetBasic() != null)
        {
            node.GetBasic().Apply(this);
        }
        OutAUnExp(node);
    }
    public virtual void InACharBasic(ACharBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharBasic(ACharBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseACharBasic(ACharBasic node)
    {
        InACharBasic(node);
        if(node.GetChar() != null)
        {
            node.GetChar().Apply(this);
        }
        OutACharBasic(node);
    }
    public virtual void InASetBasic(ASetBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutASetBasic(ASetBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseASetBasic(ASetBasic node)
    {
        InASetBasic(node);
        if(node.GetSet() != null)
        {
            node.GetSet().Apply(this);
        }
        OutASetBasic(node);
    }
    public virtual void InAStringBasic(AStringBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringBasic(AStringBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringBasic(AStringBasic node)
    {
        InAStringBasic(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringBasic(node);
    }
    public virtual void InAIdBasic(AIdBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdBasic(AIdBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdBasic(AIdBasic node)
    {
        InAIdBasic(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdBasic(node);
    }
    public virtual void InARegExpBasic(ARegExpBasic node)
    {
        DefaultIn(node);
    }

    public virtual void OutARegExpBasic(ARegExpBasic node)
    {
        DefaultOut(node);
    }

    public override void CaseARegExpBasic(ARegExpBasic node)
    {
        InARegExpBasic(node);
        if(node.GetRegExp() != null)
        {
            node.GetRegExp().Apply(this);
        }
        OutARegExpBasic(node);
    }
    public virtual void InACharChar(ACharChar node)
    {
        DefaultIn(node);
    }

    public virtual void OutACharChar(ACharChar node)
    {
        DefaultOut(node);
    }

    public override void CaseACharChar(ACharChar node)
    {
        InACharChar(node);
        if(node.GetChar() != null)
        {
            node.GetChar().Apply(this);
        }
        OutACharChar(node);
    }
    public virtual void InADecChar(ADecChar node)
    {
        DefaultIn(node);
    }

    public virtual void OutADecChar(ADecChar node)
    {
        DefaultOut(node);
    }

    public override void CaseADecChar(ADecChar node)
    {
        InADecChar(node);
        if(node.GetDecChar() != null)
        {
            node.GetDecChar().Apply(this);
        }
        OutADecChar(node);
    }
    public virtual void InAHexChar(AHexChar node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHexChar(AHexChar node)
    {
        DefaultOut(node);
    }

    public override void CaseAHexChar(AHexChar node)
    {
        InAHexChar(node);
        if(node.GetHexChar() != null)
        {
            node.GetHexChar().Apply(this);
        }
        OutAHexChar(node);
    }
    public virtual void InAOperationSet(AOperationSet node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOperationSet(AOperationSet node)
    {
        DefaultOut(node);
    }

    public override void CaseAOperationSet(AOperationSet node)
    {
        InAOperationSet(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetBinOp() != null)
        {
            node.GetBinOp().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAOperationSet(node);
    }
    public virtual void InAIntervalSet(AIntervalSet node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntervalSet(AIntervalSet node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntervalSet(AIntervalSet node)
    {
        InAIntervalSet(node);
        if(node.GetRight() != null)
        {
            node.GetRight().Apply(this);
        }
        if(node.GetLeft() != null)
        {
            node.GetLeft().Apply(this);
        }
        OutAIntervalSet(node);
    }
    public virtual void InAStarUnOp(AStarUnOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStarUnOp(AStarUnOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAStarUnOp(AStarUnOp node)
    {
        InAStarUnOp(node);
        if(node.GetStar() != null)
        {
            node.GetStar().Apply(this);
        }
        OutAStarUnOp(node);
    }
    public virtual void InAQMarkUnOp(AQMarkUnOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAQMarkUnOp(AQMarkUnOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAQMarkUnOp(AQMarkUnOp node)
    {
        InAQMarkUnOp(node);
        if(node.GetQMark() != null)
        {
            node.GetQMark().Apply(this);
        }
        OutAQMarkUnOp(node);
    }
    public virtual void InAPlusUnOp(APlusUnOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusUnOp(APlusUnOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusUnOp(APlusUnOp node)
    {
        InAPlusUnOp(node);
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        OutAPlusUnOp(node);
    }
    public virtual void InAPlusBinOp(APlusBinOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusBinOp(APlusBinOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusBinOp(APlusBinOp node)
    {
        InAPlusBinOp(node);
        OutAPlusBinOp(node);
    }
    public virtual void InAMinusBinOp(AMinusBinOp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusBinOp(AMinusBinOp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusBinOp(AMinusBinOp node)
    {
        InAMinusBinOp(node);
        OutAMinusBinOp(node);
    }
    public virtual void InAProductions(AProductions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductions(AProductions node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductions(AProductions node)
    {
        InAProductions(node);
        {
            Object[] temp = new Object[node.GetProds().Count];
            node.GetProds().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PProd) temp[i]).Apply(this);
            }
        }
        OutAProductions(node);
    }
    public virtual void InAProd(AProd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProd(AProd node)
    {
        DefaultOut(node);
    }

    public override void CaseAProd(AProd node)
    {
        InAProd(node);
        {
            Object[] temp = new Object[node.GetAlts().Count];
            node.GetAlts().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PAlt) temp[i]).Apply(this);
            }
        }
        {
            Object[] temp = new Object[node.GetProdTransform().Count];
            node.GetProdTransform().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PElem) temp[i]).Apply(this);
            }
        }
        if(node.GetArrow() != null)
        {
            node.GetArrow().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAProd(node);
    }
    public virtual void InAParsedAlt(AParsedAlt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParsedAlt(AParsedAlt node)
    {
        DefaultOut(node);
    }

    public override void CaseAParsedAlt(AParsedAlt node)
    {
        InAParsedAlt(node);
        if(node.GetAltTransform() != null)
        {
            node.GetAltTransform().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetElems().Count];
            node.GetElems().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PElem) temp[i]).Apply(this);
            }
        }
        if(node.GetAltName() != null)
        {
            node.GetAltName().Apply(this);
        }
        OutAParsedAlt(node);
    }
    public virtual void InAAltTransform(AAltTransform node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAltTransform(AAltTransform node)
    {
        DefaultOut(node);
    }

    public override void CaseAAltTransform(AAltTransform node)
    {
        InAAltTransform(node);
        if(node.GetRBrace() != null)
        {
            node.GetRBrace().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetTerms().Count];
            node.GetTerms().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PTerm) temp[i]).Apply(this);
            }
        }
        if(node.GetLBrace() != null)
        {
            node.GetLBrace().Apply(this);
        }
        OutAAltTransform(node);
    }
    public virtual void InANewTerm(ANewTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewTerm(ANewTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseANewTerm(ANewTerm node)
    {
        InANewTerm(node);
        {
            Object[] temp = new Object[node.GetParams().Count];
            node.GetParams().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PTerm) temp[i]).Apply(this);
            }
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetProdName() != null)
        {
            node.GetProdName().Apply(this);
        }
        OutANewTerm(node);
    }
    public virtual void InAListTerm(AListTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutAListTerm(AListTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseAListTerm(AListTerm node)
    {
        InAListTerm(node);
        {
            Object[] temp = new Object[node.GetListTerms().Count];
            node.GetListTerms().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PListTerm) temp[i]).Apply(this);
            }
        }
        if(node.GetLBkt() != null)
        {
            node.GetLBkt().Apply(this);
        }
        OutAListTerm(node);
    }
    public virtual void InASimpleTerm(ASimpleTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleTerm(ASimpleTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleTerm(ASimpleTerm node)
    {
        InASimpleTerm(node);
        if(node.GetSimpleTermTail() != null)
        {
            node.GetSimpleTermTail().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetSpecifier() != null)
        {
            node.GetSpecifier().Apply(this);
        }
        OutASimpleTerm(node);
    }
    public virtual void InANullTerm(ANullTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutANullTerm(ANullTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseANullTerm(ANullTerm node)
    {
        InANullTerm(node);
        OutANullTerm(node);
    }
    public virtual void InANewListTerm(ANewListTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutANewListTerm(ANewListTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseANewListTerm(ANewListTerm node)
    {
        InANewListTerm(node);
        {
            Object[] temp = new Object[node.GetParams().Count];
            node.GetParams().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PTerm) temp[i]).Apply(this);
            }
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetProdName() != null)
        {
            node.GetProdName().Apply(this);
        }
        OutANewListTerm(node);
    }
    public virtual void InASimpleListTerm(ASimpleListTerm node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleListTerm(ASimpleListTerm node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleListTerm(ASimpleListTerm node)
    {
        InASimpleListTerm(node);
        if(node.GetSimpleTermTail() != null)
        {
            node.GetSimpleTermTail().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetSpecifier() != null)
        {
            node.GetSpecifier().Apply(this);
        }
        OutASimpleListTerm(node);
    }
    public virtual void InAProdName(AProdName node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProdName(AProdName node)
    {
        DefaultOut(node);
    }

    public override void CaseAProdName(AProdName node)
    {
        InAProdName(node);
        if(node.GetProdNameTail() != null)
        {
            node.GetProdNameTail().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAProdName(node);
    }
    public virtual void InAElem(AElem node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElem(AElem node)
    {
        DefaultOut(node);
    }

    public override void CaseAElem(AElem node)
    {
        InAElem(node);
        if(node.GetUnOp() != null)
        {
            node.GetUnOp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetSpecifier() != null)
        {
            node.GetSpecifier().Apply(this);
        }
        if(node.GetElemName() != null)
        {
            node.GetElemName().Apply(this);
        }
        OutAElem(node);
    }
    public virtual void InATokenSpecifier(ATokenSpecifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutATokenSpecifier(ATokenSpecifier node)
    {
        DefaultOut(node);
    }

    public override void CaseATokenSpecifier(ATokenSpecifier node)
    {
        InATokenSpecifier(node);
        OutATokenSpecifier(node);
    }
    public virtual void InAProductionSpecifier(AProductionSpecifier node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProductionSpecifier(AProductionSpecifier node)
    {
        DefaultOut(node);
    }

    public override void CaseAProductionSpecifier(AProductionSpecifier node)
    {
        InAProductionSpecifier(node);
        OutAProductionSpecifier(node);
    }
    public virtual void InAAst(AAst node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAst(AAst node)
    {
        DefaultOut(node);
    }

    public override void CaseAAst(AAst node)
    {
        InAAst(node);
        {
            Object[] temp = new Object[node.GetProds().Count];
            node.GetProds().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PAstProd) temp[i]).Apply(this);
            }
        }
        OutAAst(node);
    }
    public virtual void InAAstProd(AAstProd node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAstProd(AAstProd node)
    {
        DefaultOut(node);
    }

    public override void CaseAAstProd(AAstProd node)
    {
        InAAstProd(node);
        {
            Object[] temp = new Object[node.GetAlts().Count];
            node.GetAlts().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PAstAlt) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAstProd(node);
    }
    public virtual void InAAstAlt(AAstAlt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAstAlt(AAstAlt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAstAlt(AAstAlt node)
    {
        InAAstAlt(node);
        {
            Object[] temp = new Object[node.GetElems().Count];
            node.GetElems().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PElem) temp[i]).Apply(this);
            }
        }
        if(node.GetAltName() != null)
        {
            node.GetAltName().Apply(this);
        }
        OutAAstAlt(node);
    }
}
} // namespace org.sablecc.sablecc.analysis
