/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  Moduino.analysis;

namespace Moduino.node {

public abstract class PGrammar : Node
{
}

public abstract class PFunc : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PExp : Node
{
}

public abstract class PId : Node
{
}


public sealed class AGrammar : PGrammar
{
    private TypedList _func_;

    public AGrammar ()
    {
        this._func_ = new TypedList(new Func_Cast(this));
    }

    public AGrammar (
            IList _func_
    )
    {
        this._func_ = new TypedList(new Func_Cast(this));
        this._func_.Clear();
        this._func_.AddAll(_func_);
    }

    public override Object Clone()
    {
        return new AGrammar (
            CloneList (_func_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGrammar(this);
    }

    public IList GetFunc ()
    {
        return _func_;
    }

    public void setFunc (IList list)
    {
        _func_.Clear();
        _func_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_func_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _func_.Contains(child) )
        {
            _func_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _func_.Count; i++ )
        {
            Node n = (Node)_func_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _func_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _func_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Func_Cast : Cast
    {
        AGrammar obj;

        internal Func_Cast (AGrammar obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PFunc node = (PFunc) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PFunc node = (PFunc) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AProgFunc : PFunc
{
    private TypedList _stmt_;

    public AProgFunc ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public AProgFunc (
            IList _stmt_
    )
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
    }

    public override Object Clone()
    {
        return new AProgFunc (
            CloneList (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgFunc(this);
    }

    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Stmt_Cast : Cast
    {
        AProgFunc obj;

        internal Stmt_Cast (AProgFunc obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ANewFunc : PFunc
{
    private PId _id_;
    private TypedList _stmt_;

    public ANewFunc ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public ANewFunc (
            PId _id_,
            IList _stmt_
    )
    {
        SetId (_id_);
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
    }

    public override Object Clone()
    {
        return new ANewFunc (
            (PId)CloneNode (_id_),
            CloneList (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANewFunc(this);
    }

    public PId GetId ()
    {
        return _id_;
    }

    public void SetId (PId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((PId) newChild);
            return;
        }
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Stmt_Cast : Cast
    {
        ANewFunc obj;

        internal Stmt_Cast (ANewFunc obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AExpStmt : PStmt
{
    private PExp _exp_;

    public AExpStmt ()
    {
    }

    public AExpStmt (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AExpStmt (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAExpStmt(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignStmt : PStmt
{
    private PId _id_;
    private PExp _exp_;

    public AAssignStmt ()
    {
    }

    public AAssignStmt (
            PId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignStmt (
            (PId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStmt(this);
    }

    public PId GetId ()
    {
        return _id_;
    }

    public void SetId (PId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((PId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADeclStmt : PStmt
{
    private PId _id_;

    public ADeclStmt ()
    {
    }

    public ADeclStmt (
            PId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new ADeclStmt (
            (PId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStmt(this);
    }

    public PId GetId ()
    {
        return _id_;
    }

    public void SetId (PId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((PId) newChild);
            return;
        }
    }

}
public sealed class AFunccallStmt : PStmt
{
    private PId _id_;

    public AFunccallStmt ()
    {
    }

    public AFunccallStmt (
            PId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AFunccallStmt (
            (PId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunccallStmt(this);
    }

    public PId GetId ()
    {
        return _id_;
    }

    public void SetId (PId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((PId) newChild);
            return;
        }
    }

}
public sealed class APlusExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public APlusExp ()
    {
    }

    public APlusExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new APlusExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMinusExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AMinusExp ()
    {
    }

    public AMinusExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AMinusExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADivExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public ADivExp ()
    {
    }

    public ADivExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new ADivExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMultExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AMultExp ()
    {
    }

    public AMultExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AMultExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ANumberExp : PExp
{
    private TNumber _number_;

    public ANumberExp ()
    {
    }

    public ANumberExp (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new ANumberExp (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberExp(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}
public sealed class AId : PId
{
    private TTid _tid_;

    public AId ()
    {
    }

    public AId (
            TTid _tid_
    )
    {
        SetTid (_tid_);
    }

    public override Object Clone()
    {
        return new AId (
            (TTid)CloneNode (_tid_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAId(this);
    }

    public TTid GetTid ()
    {
        return _tid_;
    }

    public void SetTid (TTid node)
    {
        if(_tid_ != null)
        {
            _tid_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _tid_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_tid_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _tid_ == child )
        {
            _tid_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _tid_ == oldChild )
        {
            SetTid ((TTid) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PGrammar _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PGrammar _base_,
        EOF _eof_)
    {
        SetPGrammar(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PGrammar) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PGrammar GetPGrammar()
    {
        return _base_;
    }
    public void SetPGrammar(PGrammar node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPGrammar((PGrammar) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
