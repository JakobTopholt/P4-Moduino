Package Moduino;

Helpers

    all = [0 .. 0xFFFF];
    lowercase = ['a' .. 'z'];
    uppercase = ['A' .. 'Z'];
    digit = ['0' .. '9'];
    hex_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];

    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf; // This takes care of different platforms

    not_cr_lf = [all - [cr + lf]];
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];
    
    escaped_chars = '\n'; //TODO: more escaped chars
    valid_char = [not_cr_lf - [''' + '"']];
    string_char = [valid_char + '''] | escaped_chars | '\"';
    char_char = [valid_char + '"'] | escaped_chars | '\' + ''';

    blank = (' ' | tab | eol)+;

    short_comment = '//' not_cr_lf* eol;
    long_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';

    letter = lowercase | uppercase | '_' | '$';
    id_part = lowercase (lowercase | digit)*;

Tokens

    tprog = 'prog';
    tloop = 'loop';
    tfunc = 'func';
    if = 'if';
    else = 'else';
    for = 'for';
    do = 'do';
    while = 'while';
    treturn = 'return';

    tint = 'int';
    tdecimal = 'decimal';
    tbool = 'bool';
    tchar = 'char';
    tstring = 'string';
    tunit = 'unit';
    tvalue = 'value';
    
    ttrue = 'true';
    tfalse = 'false';

    l_bkt = '[';
    r_bkt = ']';
    l_par = '(';
    r_par = ')';
    l_brace =  '{';
    r_brace =  '}';
    
    tplusplus = '++';
    tminusminus = '--';
    tplusassign = '+=';
    tminusassign = '-=';
    tslashslash = '//';
    tstarstar = '**';
    tbarbar = '||';
    tand = '&&';
    tequalequal = '==';
    tnotequal = '!=';
    tlessequal = '<=';
    tgreaterequal = '>=';
    tless = '<';
    tgreater = '>';

    plus = '+';
    minus = '-';
    slash = '/';
    star = '*';
    modulo = '%'; 

    equal = '=';
    q_mark = '?';
    bar = '|';
    tamparsand = '&';
    not = '!';
    arrow = '=>';

    comma = ',';
    semicolon = ';';
    colon = ':';
    dot = '.';

    id = id_part ('_' id_part)*;

    decimal = digit+ '.' digit+;
    number = digit+;
    hex = '0' ('x' | 'X') hex_digit+;

    string = '"' string_char+ '"';
    char = ''' char_char+ '''; //TODO: test if string and char works correctly

    blank = blank;
    comment = short_comment | long_comment;


Ignored Tokens
    blank,
    comment;

Productions
    grammar = funcunit_list? {-> New grammar([funcunit_list.funcunit])};
    
    //Any ordered list of functions such as: unit, func, unit, unit, func,
    funcunit_list {-> funcunit*} = funcunit funcunit_list? {-> [funcunit.funcunit, funcunit_list.funcunit]};
    
    funcunit {-> funcunit} = {unitdecl} unitdecl {-> New funcunit.unitdecl(unitdecl.unitdecl)}
                           | {func} func {-> New funcunit.func(func.func)};
    
    //// Units
    
    // A unit declaration consist of one unit and it's subunits
    unitdecl {-> unitdecl} = tunit id l_brace subunit_list r_brace {-> New unitdecl(id, [subunit_list.subunit])};
    
    subunit_list {-> subunit*} = subunit subunit_list? {-> [subunit.subunit, subunit_list.subunit]};
    
    subunit {-> subunit} = id arrow exp semicolon {-> New subunit(id, exp.exp)};
    
    // Distance/Time speed = 50 meters / 10 seconds 
    // Unituse is when the unit is used as the type such as distance/time (speed) or distance/time/time (acceleration), /time*distance and /time/time*distance is also allowed
    unittype {-> unittype} = {unituse} firstunituse unituse_list?   {-> New unittype.unit([firstunituse.unituse, unituse_list.unituse])}
                           | {type} type                            {-> New unittype.type(type.type)};
    
    // first unituse is rather special because here the star shouldn't be used
    firstunituse {-> unituse} = {num}   id      {-> New unituse.num(id)}
                              | {usual} unituse {-> unituse.unituse};
                              
    unituse_list {-> unituse*} = unituse unituse_list? {-> [unituse.unituse, unituse_list.unituse]};
    
    unituse {-> unituse} = {num}    star id     {-> New unituse.num(id)}
                         | {den}    slash id    {-> New unituse.den(id)};
    
    // For usage in expressions ex: 50 ms, 5 s, 50 meters
    unitnumber {-> unitnumber} = decimal firstsingleunit singleunit_list? {-> New unitnumber(decimal, [firstsingleunit.singleunit, singleunit_list.singleunit])};
    
    firstsingleunit {-> singleunit} = {num} id {-> New singleunit.num(id)}
                                    | {den} tslashslash id {-> New singleunit.den(id)};
                                    
    singleunit_list {-> singleunit*} = {list} singleunit singleunit_list? {-> [singleunit.singleunit, singleunit_list.singleunit]};
    
    singleunit {-> singleunit} = {num} tstarstar id {-> New singleunit.num(id)}
                               | {den} tslashslash id {-> New singleunit.den(id)};
                           
    //// Functions and statements
    // prog {}, loop {}, func a {} or int a {}
    func {-> func} = {prog}     tprog l_brace stmt_list r_brace         {-> New func.prog([stmt_list.stmt])}
                   | {loop}     tloop l_brace stmt_list r_brace         {-> New func.loop([stmt_list.stmt])}
                   | {untyped}  tfunc l_par args? r_par id l_brace stmt_list r_brace      {-> New func.untyped(id, [args.arg], [stmt_list.stmt])}
                   | {typed}    unittype id l_par args? r_par l_brace stmt_list r_brace   {-> New func.typed(unittype.unittype, id, [args.arg], [stmt_list.stmt])};
    
    //arguments used to declare a function and params when using a function
    params {-> exp*} = {list}   exp comma params   {-> [params.exp, exp.exp]}
                     | {single} exp                 {-> [exp.exp]};
                     
    args {-> arg*} = {list} arg comma args {-> [arg.arg, args.arg]}
                   | {single} arg {-> [arg.arg]};
                   
    arg {-> arg} = unittype id {-> New arg(unittype.unittype, id)};
    
    // Statements
    stmt_list {-> stmt*} = stmt stmt_list?                      {-> [stmt.stmt, stmt_list.stmt]};
    
    stmt {-> stmt} = {assign}   assign semicolon                    {-> assign.stmt}
                   | {decl}     unittype id semicolon               {-> New stmt.decl(unittype.unittype, id)}
                   | {declass}  unittype id equal exp semicolon     {-> New stmt.declass(unittype.unittype, id, exp.exp)}
                   | {funccall} id l_par params? r_par semicolon    {-> New stmt.funccall(id, [params.exp])}
                   | {return}   treturn exp semicolon               {-> New stmt.return(exp.exp)}
                   | {scoped}   scoped                              {-> New stmt.scoped(scoped.scoped)};
    
    // Needed for for loop for (int i; i < 5;i += 1)
    assign {-> stmt} = {normal}         id equal exp        {-> New stmt.assign(id, exp.exp)}
                     | {plusassign}     id tplusassign exp  {-> New stmt.plusassign(id, exp.exp)}
                     | {minusassign}    id tminusassign exp {-> New stmt.minusassign(id, exp.exp)}
                     | {prefixplus}     tplusplus id        {-> New stmt.prefixplus(id)}
                     | {prefixminus}    tminusminus id      {-> New stmt.prefixminus(id)}
                     | {suffixplus}     id tplusplus        {-> New stmt.suffixplus(id)}
                     | {suffixminus}    id tminusminus      {-> New stmt.suffixminus(id)};
    // scoped/block statements
    scoped {-> scoped} = {if}       if l_par exp r_par l_brace stmt_list r_brace                                                                    {-> New scoped.if(exp.exp, [stmt_list.stmt])}
                       | {else}     else l_brace stmt_list r_brace                                                                                  {-> New scoped.else([stmt_list.stmt])}
                       | {elseif}   else if l_par exp r_par l_brace stmt_list r_brace                                                               {-> New scoped.elseif(exp.exp, [stmt_list.stmt])}
                       | {for}      for l_par [init]:stmt [cond]:exp semicolon [incre]:assign r_par l_brace stmt_list r_brace {-> New scoped.for(init.stmt, cond.exp, incre.stmt, [stmt_list.stmt])}
                       | {while}    while l_par exp r_par l_brace stmt_list r_brace                                                                 {-> New scoped.while(exp.exp, [stmt_list.stmt])}
                       | {dowhile}  do l_brace stmt_list r_brace while l_par exp r_par                                                              {-> New scoped.dowhile([stmt_list.stmt], exp.exp)};
                           
    //// Expressions - check precedence table from report
    exp {-> exp}= {ternary}         p8 q_mark [true]:exp colon [false]:exp  {-> New exp.ternary(p8.exp, true.exp, false.exp)}
                | p8 {-> p8.exp}; //TODO: right to left override case
    p8 {-> exp} = {or}              p8 tbarbar p7                           {-> New exp.or(p8.exp, p7.exp)}
                | p7 {-> p7.exp};
    p7 {-> exp} = {and}             p7 tand p6                              {-> New exp.and(p7.exp, p6.exp)}
                | p6 {-> p6.exp};
    p6 {-> exp} = {equal}           p6 tequalequal p5                       {-> New exp.equal(p6.exp, p5.exp)}
                | {notequal}        p6 tnotequal p5                         {-> New exp.notequal(p6.exp, p5.exp)}
                | p5 {-> p5.exp};
    p5 {-> exp} = {greater}         p5 tgreater p4                          {-> New exp.greater(p5.exp, p4.exp)}
                | {greaterequal}    p5 tgreaterequal p4                     {-> New exp.greaterequal(p5.exp, p4.exp)}
                | {less}            p5 tless p4                             {-> New exp.less(p5.exp, p4.exp)}
                | {lessequal}       p5 tlessequal p4                        {-> New exp.lessequal(p5.exp, p4.exp)}
                | p4 {-> p4.exp};
    p4 {-> exp} = {plus}            p4 plus p3                              {-> New exp.plus(p4.exp, p3.exp)}
                | {minus}           p4 minus p3                             {-> New exp.minus(p4.exp, p3.exp)}
                | p3 {-> p3.exp};
    p3 {-> exp} = {divide}          p3 slash p2                             {-> New exp.divide(p3.exp, p2.exp)}
                | {multiply}        p3 star p2                              {-> New exp.multiply(p3.exp, p2.exp)}
                | {remainder}       p3 modulo p2                            {-> New exp.remainder(p3.exp, p2.exp)}
                | p2 {-> p2.exp};
    p2 {-> exp} = {suffixplusplus}  p1 tplusplus                            {-> New exp.suffixplusplus(p1.exp)}
                | {suffixminusminus}p1 tminusminus                          {-> New exp.suffixminusminus(p1.exp)}
                | {unaryminus}      minus p1                                {-> New exp.unaryminus(p1.exp)}
                | {logicalnot}      not p1                                  {-> New exp.logicalnot(p1.exp)}
                | {cast}            l_par type r_par p1                     {-> New exp.cast(type.type, p1.exp)}
                | p1 {-> p1.exp}; //TODO: right to left override case
    p1 {-> exp} = {prefixplusplus}  tplusplus p0                            {-> New exp.prefixplusplus(p0.exp)}
                | {prefixminusminus}tminusminus p0                          {-> New exp.prefixminusminus(p0.exp)}
                | {funccall}        id l_par params? r_par                  {-> New exp.funccall(id, [params.exp])} // <- array and structaccess goes here
                | p0 {-> p0.exp};
    p0 {-> exp} = {id}              id {-> New exp.id(id)}
                | {decimal}         decimal                                 {-> New exp.decimal(decimal)}
                | {unit}            unitnumber                              {-> New exp.unit(unitnumber.unitnumber)}
                | {value}           tvalue                                  {-> New exp.value()}
                | {number}          number                                  {-> New exp.number(number)}
                | {boolean}         boolean                                 {-> New exp.boolean(boolean.boolean)}
                | {string}          string                                  {-> New exp.string(string)}
                | {char}            char                                    {-> New exp.char(char)}
                | {exp}             l_par exp r_par                         {-> exp.exp};
                         
    //// Miscellaneous    
    type {-> type} = {int}      tint        {-> New type.int()}
                   | {decimal}  tdecimal    {-> New type.decimal()}
                   | {bool}     tbool       {-> New type.bool()}
                   | {char}     tchar       {-> New type.char()}
                   | {string}   tstring     {-> New type.string()};
                   
    boolean {-> boolean} = {true} ttrue {-> New boolean.true()}
                         | {false} tfalse {-> New boolean.false()};

Abstract Syntax Tree
    grammar = funcunit+;
    
    funcunit = {unitdecl} unitdecl
             | {func} func;
             
    unitdecl = id subunit+;
    
    subunit = id exp;
    
    func = {prog} stmt+
         | {loop} stmt+
         | {untyped} id arg* stmt+
         | {typed} unittype id arg* stmt+;
         
    arg = unittype id;
         
    stmt = {exp} exp
         | {assign}      id exp       
         | {plusassign}  id exp   
         | {minusassign} id exp  
         | {prefixplus}  id             
         | {prefixminus} id            
         | {suffixplus}  id             
         | {suffixminus} id                          
         | {decl} unittype id
         | {declass} unittype id exp
         | {funccall} id [params]:exp*
         | {return} exp
         | {scoped} scoped;
         
    unittype = {type} type
             | {unit} unituse+;
                      
    type = {int} 
         | {decimal}
         | {bool}
         | {char}
         | {string};
         
    unituse = {num} id // numerator
            | {den} id; // denumerator
            
    scoped = {if} exp stmt+
           | {elseif} exp stmt+
           | {else} stmt+
           | {for} [init]:stmt [cond]:exp [incre]:stmt stmt+ // incre is always an assignstmt
           | {while} exp stmt+
           | {dowhile} stmt+ exp;
    
    
    //Expressions
    exp = {ternary}         [cond]:exp [true]:exp [false]:exp
        | {or}              [l]:exp [r]:exp
        | {and}             [l]:exp [r]:exp
        | {equal}           [l]:exp [r]:exp
        | {notequal}        [l]:exp [r]:exp
        | {greater}         [l]:exp [r]:exp
        | {greaterequal}    [l]:exp [r]:exp
        | {less}            [l]:exp [r]:exp
        | {lessequal}       [l]:exp [r]:exp
        | {plus}            [l]:exp [r]:exp
        | {minus}           [l]:exp [r]:exp
        | {divide}          [l]:exp [r]:exp
        | {multiply}        [l]:exp [r]:exp
        | {remainder}       [l]:exp [r]:exp
        | {suffixplusplus}  exp
        | {suffixminusminus}exp
        | {unaryminus}      exp
        | {logicalnot}      exp
        | {cast}            type exp
        | {prefixplusplus}  exp
        | {prefixminusminus}exp
        | {funccall}        id exp*
        | {id}              id
        | {decimal}         decimal
        | {unit}            unitnumber
        | {value}           
        | {number}          number
        | {boolean}         boolean
        | {string}          string
        | {char}            char
        | {exp}             exp;  
        
    boolean = {true} | {false};
    unitnumber = decimal singleunit*;
    singleunit = {num} id
               | {den} id;
               
    unary = {plusplus}
          | {minusminus};
    
// TODO: Arrays
// TODO: Switch
