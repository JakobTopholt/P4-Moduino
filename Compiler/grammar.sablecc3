Package Moduino;

Helpers

    all = [0 .. 0xFFFF];
    lowercase = ['a' .. 'z'];
    uppercase = ['A' .. 'Z'];
    digit = ['0' .. '9'];
    hex_digit = [digit + [['a' .. 'f'] + ['A' .. 'F']]];

    tab = 9;
    cr = 13;
    lf = 10;
    eol = cr lf | cr | lf; // This takes care of different platforms

    not_cr_lf = [all - [cr + lf]];
    not_star = [all - '*'];
    not_star_slash = [not_star - '/'];

    blank = (' ' | tab | eol)+;

    short_comment = '//' not_cr_lf* eol;
    long_comment =
        '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/';
    comment = short_comment | long_comment;

    letter = lowercase | uppercase | '_' | '$';
    id_part = lowercase (lowercase | digit)*;

Tokens

    prog = 'Prog';
    tfunc = 'func';

    tint = 'int';
    tdecimal = 'decimal';
    tbool = 'bool';
    tchar = 'char';
    tstring = 'string';
    tunit = 'unit';

    l_bkt = '[';
    r_bkt = ']';
    l_par = '(';
    r_par = ')';
    l_brace =  '{';
    r_brace =  '}';

    plus = '+';
    minus = '-';
    slash = '/';
    star = '*';

    equal = '=';
    q_mark = '?';
    bar = '|';
    arrow = '=>';

    comma = ',';
    semicolon = ';';
    colon = ':';

    tid = id_part ('_' id_part)*;

    char = ''' not_cr_lf ''';
    number = digit+;
    hex = '0' ('x' | 'X') hex_digit+;

    string = ''' [not_cr_lf - ''']+ ''';

    blank = blank;
    comment = comment;


Ignored Tokens

    blank,
    comment;

Productions
    grammar = unit_list? func_list {-> New grammar([unit_list.unit], [func_list.func])};
    func_list {-> func*} = {list} func func_list {-> [func.func, func_list.func]} 
                         | {single} func {-> [func.func]};
    stmt_list {-> stmt*} = {list} stmt stmt_list {-> [stmt.stmt, stmt_list.stmt]} 
                       | {single} stmt {-> [stmt.stmt]};
    unit_list {-> unit*} = {list} unit unit_list {-> [unit.unit, unit_list.unit]}
                             | {single} unit {-> [unit.unit]};
    subunit_list {-> subunit*} = {list} subunit subunit_list {-> [subunit.subunit, subunit_list.subunit]}
                                   | {single} subunit {-> [subunit.subunit]};
                             
    func {-> func} = {prog} prog l_brace stmt_list r_brace {-> New func.prog([stmt_list.stmt])}
                   | {new} tfunc P.id l_brace stmt_list r_brace {-> New func.new(id.id, [stmt_list.stmt])};
    stmt {-> stmt} = {exp} exp semicolon {-> New stmt.exp(exp.exp)}
                   | {assign} P.id equal exp semicolon {-> New stmt.assign(id.id, exp.exp)}
                   | {decl} decl semicolon {-> New stmt.decl(decl.decl)}
                   | {funccall} P.id l_par r_par semicolon {-> New stmt.funccall(id.id)};
    unit {-> unit} = tunit id colon int l_brace subunit_list r_brace {-> New unit(id.id, int, [subunit_list.subunit])};
    subunit {-> subunit} = id arrow stmt semicolon {-> New subunit(id.id, stmt.exp)}; //TODO allow value token and stmt block

    exp {-> exp} = {plus} exp plus factor {-> New exp.plus (exp.exp, factor.exp) }
                 | {minus} exp minus factor {-> New exp.minus (exp.exp, factor.exp) }
                 | {factor} factor {-> factor.exp };

    factor {-> exp} = {mult} factor star term {-> New exp.mult (factor.exp, term.exp) } //TODO: Modulo %
                    | {div} factor slash term {-> New exp.div (factor.exp, term.exp) }
                    | {term} term {-> term.exp };

    term {-> exp} = {expr} l_par exp r_par {-> exp.exp }
                  | {number} number {-> New exp.number(number) };
    id {-> P.id} = tid {-> New id(tid)};
    decl {-> decl} = {int} tint id {-> New decl.int (id.id)}
                   | {decimal} tdecimal id {-> New decl.decimal (id.id)}
                   | {bool} tbool id {-> New decl.bool (id.id)}
                   | {char} tchar id {-> New decl.char (id.id)}
                   | {string} tstring id {-> New decl.string (id.id)};


Abstract Syntax Tree
    grammar = unit* func*;
    unit = id int subunit*;
    subunit = id exp; //TODO: fix to stmt
    func = {prog} stmt+
         | {new} id stmt+;
    stmt = {exp} exp
         | {assign} id exp
         | {decl} decl
         | {funccall} id; // TODO: Controlstructures
    exp = {plus}    [l]:exp  [r]:exp 
        | {minus}   [l]:exp  [r]:exp 
        | {div}     [l]:exp  [r]:exp 
        | {mult}    [l]:exp  [r]:exp 
        | {number}  number; // TODO: function with return value
    id = tid;
    decl = {int} id
         | {decimal} id
         | {bool} id
         | {char} id
         | {string} id;
