# Arduino-compatible smart garden

unit Volume{
    ml => value;
    dl => value/100;
    l => value/1000;
}
unit Time{
    ms => value;
    s => value/1000;
    min => value/1000/60;
    h => value/1000/60/60;
    day => value/1000/60/60/24;
    week => value/1000/60/60/24/7;
    month => value/1000/60/60/24/7/30;
}
unit Weight{
    g => value;
    kg => value/1000;
}
unit Humidity{
    #percentage
    damp => value;
}
# setup
prog{
    # Pin definition
    pin tomatoSensor = 1;
    pin citrusSensor = 2;
    pin chilliSensor = 3;
    pin mushroomSensor = 4;
    pin dampnessSensor = 5;
    
    pin waterPump1 = 6;
    setpin(waterPump1, output);
    pin waterPump2 = 7;
    setpin(waterPump2, output);
    pin waterPump3 = 8;
    setpin(waterPump3, output);
    pin waterPump4 = 9;
    setpin(waterPump4, output);
    pin humidifier = 10;
    setpin(humidifier, output);

    Weight tomatoesWeight = 500g;    #readpin(tomatoSensor)
    Weight citrusTreeWeight = 2kg;   #readpin(citrusSensor)
    Weight chillisWeight = 100g;     #readpin(chilliSensor)
    Weight mushroomsWeight = 200g;   #readpin(mushroomSensor)
    Humidity dampness = 80damp;          #readpin(dampnessSensor)

    Volume/Weight tomatoWater = 210l/1kg; 
    Volume/Weight citrustreeWater = 600l/1kg; 
    Volume/Weight chilliWater = 320l/1kg; 

    Time/Volume tomatoPlants = 80day/(tomatoWater * tomatoesWeight);
    Time/Volume citrusTree = 7month/(citrustreeWater  * citrusTreeWeight);
    Time/Volume chilliPlants = 150day/(chilliWater  * chillisWeight);
    Time mushrooms = 6.5week;

    Time tomatoWatercycle = 3day;
    Time citrusWatercycle = 1week;
    Time chilliWatercycle = 2week;
    Humidity mushroomWatercycle = 85damp;
    
    
    Time internalTime = 0day;
    Time tomatoTime = 0day;
    Time citrusTime = 0day;
    Time chilliTime = 0day;
}

# update
loop{
   # read sensors
   readWeightSensor();
   readHumiditySensor();

   # action
   # Tomatoes
   if (tomatoTime < internalTime){
       updatePlant(waterPump1, tomatoPlants, tomatoWatercycle);
       tomatoTime += tomatoWatercycle;
   }
   # Citrus
   if (citrusTime < internalTime) {
       updatePlant(waterPump2, citrusTree, citrusWatercycle);
       citrusTime += citrusWatercycle;
   }
   # Chilli
   if (chilliTime < internalTime ) {
       updatePlant(waterPump3, chilliPlants, chilliWatercycle);
       chilliTime += chilliWatercycle;
   }
   updateMushroom();
   
   # report
   generateGardenStatistic();
   internalTime += 1day; 
   delay(1day);
}

# update methods
func readWeightSensor(){
   tomatoesWeight += 50g;      #readpin(tomatoSensor)
   citrusTreeWeight += 100g;   #readpin(citrusSensor)
   chillisWeight += 30g;       #readpin(chilliSensor)
   mushroomsWeight += 20g;     #readpin(mushroomSensor)  
}
func readHumiditySensor(){
   dampness = 80damp;       #readpin(dampnessSensor)
}
func updatePlant(pin arduinoSensor, Time/Volume plant, Time sinceLastWater){
   Volume neededWater = plant / sinceLastWater;
   activateWaterpump(arduinoSensor, neededwater);
}
func updateMushroom(){
   if (dampness < mushroomWatercycle){
      activateHumidifier(mushroomWatercycle);
   }
   mushrooms -= 1day;
}

# action methods
func activateWaterpump(pin arduinoSensor, Volume water){
   # activate a arduino enabled pump
   Volume / Time pumpFlow = 40ml/1s;
   Time timePumping = pumpFlow / water; 
   if(arduinoSensor == tomatoSensor){
      # pump water for the calculated time
      writepin(waterPump1, high);
      int runTime = (int)(timePumping/1ms);
      delay(runTime);
      writepin(waterPump1, low);
   }
   else if(arduinoSensor == citrusSensor ){
      # pump water for the calculated time
      writepin(waterPump2, high);
      int runTime = (int)(timePumping/1ms);
      delay(runTime);
      writepin(waterPump2, low);
   }
   else if(arduinoSensor == chilliSensor){
      # pump water for the calculated time
      writepin(waterPump3, high);
      int runTime = (int)(timePumping/1ms);
      delay(runTime);
      writepin(waterPump3, low);
   }
   else if(arduinoSensor == mushroomSensor){
      # pump water for the calculated time
      writepin(waterPump4, high);
      int runTime = (int)(timePumping/1ms);
      delay(runTime);
      writepin(waterPump4, low);
   } 
}
func activateHumidifier(Humidity dampness){
   # Har brug for at aktivere read humidifier sensor flere gange tll dampness er opnÃ¥et.
   Time/Humidity humFlow = 5damp/1min;
   Time runTime = humFlow / dampness; 
  
   writepin(humidifier, high);             # humidifier.activate;
   delay((int)runTime/1ms);
   writepin(humidifier, low);
}